<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here comes the Sun</title>
  <link rel="alternate" type="text/html" href="http://sunng.info/blog/"/>
  <link rel="self" type="application/atom+xml" href="http://sunng.info/blog/blog/categories/linux/atom.xml"/>
  <id>http://sunng.info/blog/</id>
  <updated>2014-07-01T17:11:58+08:00</updated>
  <generator uri="http://octopress.org/">Octopress</generator>
  
  <rights>Copyright © 2015, Sun Ning</rights>

  <entry>
    <title type="html">扩展 Linux Ephemeral 端口限制</title>
    
    <link rel="alternate" type="text/html" href="http://sunng.info/blog/blog/2014/07/01/extend-linux-ephemeral-ports/"/>
    
    <id>/blog/2014/07/01/extend-linux-ephemeral-ports</id>
    <published>2014-07-01T17:11:58+08:00</published>
    <updated>2014-07-01T17:11:58+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng.info/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng.info/blog/" >
<![CDATA[

<p>默认情况下，单一Linux能发起的客户端连接数是十分有限的，为此，我们要测试大规模连接程序时不得不启动很多客户端机器模拟连接。下面介绍一些增加单台Linux发起连接数的方法。</p>

<h3>增加文件打开数</h3>

<p>第一步最为基础的，提高打开文件描述符的数量。默认的情况下，这个配置为1024，是不能满足我们的使用的。增加到999999个：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>$ sudo ulimit -n 999999</div></div></pre></div></figure>

<p>持久化这个配置，可以在<code>/etc/security/</code>（或<code>/etc/security.d/</code>，取决于你的发行版）下建立文件，增加</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>*     hard    nofile      999999
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>*       soft    nofile      999999</div></div></pre></div></figure>

<p>这将对所有用户起效。</p>

<h3>增加客户端端口数</h3>

<p>当Linux发起客户端连接时，如果没有显式指定，会给客户端socket绑定一个 ephemeral 端口。这个端口的范围是从这个区间选取的：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'> $ cat /proc/sys/net/ipv4/ip_local_port_range
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>32768   61000
</div></div></pre></div></figure>

<p>如果这个区间的端口耗尽，socket就会产生<code>cannot assign requested address</code>的错误。要增加端口范围，我们需要把他设置得更大：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>$ sudo echo "1025 65535" > /proc/sys/net/ipv4/ip_local_port_range</div></div></pre></div></figure>

<p>这样，单台机器就可以发出六万多个连接。</p>

<h3>增加虚拟网卡</h3>

<p>对于内存大一点的客户端机器，六万多个连接远不是其性能极限。由于IP消息中，一条消息是由 <code>src_addr</code>, <code>src_port</code>, <code>dst_addr</code>, <code>dst_port</code> 四元组标识，所以要增加连接，我们需要更多IP。在Linux上，我们可以启动虚拟网卡绑定额外的IP。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>$ sudo ifconfig eth0:0 192.168.1.100
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>$ sudo ifconfig eth0:1 192.168.1.101
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>...</div></div></pre></div></figure>

<p>要关闭这些虚拟网卡</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>$ sudo ifconfig eth0:0 down</div></div></pre></div></figure>

<h3>使用虚拟网卡连接</h3>

<p>拥有多个IP之后，客户端socket需要显示绑定这些IP才行，以python为例，在connect前调用：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="n">sock</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">local_addr</span><span class="p">,</span> <span class="n">local_port</span><span class="p">))</span></div></div></pre></div></figure>

<p>可以指定连接的源地址和端口。在普通的Linux编程里，当你指定<code>local_port</code>为<code>0</code>时，Linux会分配一个之前提到的 ephemeral 端口。但是当使用虚拟IP时，如果仍然指定0，系统并不会因为IP不同而重用端口号，达到六万多的限制后，仍然会抛出不能获得地址的异常。</p>

<p>实际上是可以获得的，这里需要用户显式地指定端口好。如果需要大规模的连接，那就一个一个绑定好了。</p>

<h3>启用time_wait reuse和recycle</h3>

<p>Linux的socket进入<code>time_wait</code>后需要有一定的时间回收，之后端口才能重新使用。这在大规模测试的时候就比较麻烦，为了免去等待，可以打开<code>tw_reuse</code>和<code>tw_recycle</code>这两个选项。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>$ echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>$ echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse</div></div></pre></div></figure>

<p>注意这两个选项都比较激进，最好仅在测试机上使用。</p>



]]>
    </content>
  </entry>

</feed>
