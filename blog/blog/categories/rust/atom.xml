<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here comes the Sun</title>
  <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/"/>
  <link rel="self" type="application/atom+xml" href="http://sunng87.github.io/blog/blog/blog/categories/rust/atom.xml"/>
  <id>http://sunng87.github.io/blog/blog/</id>
  <updated>2015-01-25T16:22:50+08:00</updated>
  <generator uri="http://octopress.org/">Octopress</generator>
  
  <rights>Copyright © 2015, Sun Ning</rights>

  <entry>
    <title type="html">Handlebars 的 Rust 实现</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2015/01/25/ann-handlebars-rust/"/>
    
    <id>/blog/2015/01/25/ann-handlebars-rust</id>
    <published>2015-01-25T16:22:50+08:00</published>
    <updated>2015-01-25T16:22:50+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>本来一度感觉到用过 Clojure 之后很难对新语言产生兴趣了，还好遇到了 Rust 再次激活了这方面的生命力。今年的重点之一是学习 Rust 语言，方便自己能真正 touch bare metal。1月17号的 Rust 聚会上发现很多人都持有类似的想法。 C++ 之后鲜有这种语言，以至于之后成长起来的一代人都是在一个 VM 里编程，无论是 Java 还是 Python，最终都没有办法自己去管理内存，Rust 的出现给了大家一个机会。一个具备现代特性的系统编程语言，Zero runtime，可以运行在各种设备上。去年还给<a href="http://sunng.info/blog/blog/2014/04/20/rust-concurrent-made-safely/">程序员杂志写了一篇 Rust 的文章</a>，结果导致现在程序员杂志停刊了。</p>

<p>扯远了，和当时学 Clojure 一样，这次的计划还是写一个正经的项目来促进学习。关于时机的选择，主要是 crates.io 仓库的发布基本上标志生态圈开始建立了，这个时候写东西就方便很多了。</p>

<p>这次选的就是实现 Handlebars，主要原因是 rust 已经逐渐有一点 web 开发的生态圈了，但是缺少一个模版引擎，于是我就来趟这潭浑水吧。为什么是 Handlebars 呢：</p>

<ul>
<li>不要把 rust 代码写进 html 模版里，反例： jsp, ejs</li>
<li>不要把 html 代码写进 rust 里，反例： hiccup</li>
<li>能够复用，基于“继承”而不是 include</li>
<li>能够简单地自定义标签，反例：mustach</li>
</ul>

<p>基于以上的原则，<a href="https://github.com/sunng87/handlebars-rust">handlebars-rust</a> 实现了基本的模版解析、渲染，重用机制（partial/include）和自定义 helper。除了不支持一些 mustach 风格的语法以外（可以用 #each / #if 这样的 helper 替代，更清晰），基本上所有的 handlebars 功能全部支持了。如果有遗漏的话欢迎 PR。另外还写了一个 <a href="https://github.com/sunng87/handlebars-iron">handlebars-iron</a> 项目，作为一个 <a href="http://ironframework.io">Iron 框架</a>的 middlaware。</p>

<p>简单总结几点收获：</p>

<ul>
<li>Rust 中要实现类似OO的多态需要用枚举类型，trait可以用来做范型</li>
<li>静态类型语言和一个基于 javascript 视角的模版引擎对接很困难，比如 js 里有 falsy 的概念，if 的判断里 <code>false</code>/<code>0</code>/<code>&quot;&quot;</code>/<code>[]</code> 这些值都是 false，但是在rust里需要根据不同类型作判断，直接使用简直不可能。所以在 handlebars-rust 里利用了 rustc-serialize 里的 <code>Json</code> 枚举类型（没有真正序列化），要求所有渲染的数据都必须实现 <code>ToJson</code>，算是设计上的一个取舍。</li>
<li>Rust 的 derive 是一个神奇的功能，后来发现确实是一个 magic，因为可以 derive 的 trait 都是写死在编译器里的</li>
<li>关于 Rust 的 ownership 看<a href="http://nercury.github.io/rust/guide/2015/01/19/ownership.html">这篇文章</a>，作者承诺再写一篇关于 borrow 和 lifetime 的，相信也不错</li>
<li>有任何问题都可以在 stackoverflow 上问，有几个人会很快回复</li>
</ul>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">在 Docker 中安装和使用 Rust Nightly 版本</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2014/08/02/rust-with-docker/"/>
    
    <id>/blog/2014/08/02/rust-with-docker</id>
    <published>2014-08-02T18:02:12+08:00</published>
    <updated>2014-08-02T18:02:12+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>一直关注 Rust 语言，最近一下发现了两个 web 框架，<a href="http://ironframework.org">Iron</a> 和 <a href="http://nickel.rs">Nickel.rs</a>。先不说这两个框架成熟度如何，一般情况下，一个语言有了 web 框架，算是一个里程碑，说明他离靠谱也不远了。这样我决定跟一下 nightly 版本（新框架都是跟 nightly），另外也能感受一下 <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009090.html">Yehuda Katz 的构建工具 Cargo</a>。ArchLinux 的仓库里已经有 0.11 版本，再用脚本安装必然会有冲突。于是想到了最近半年<a href="https://twitter.com/jessenoller/status/495037475421954048">最火的 Docker</a>，可以轻松的创建多个环境，正是一个非常好的场景。</p>

<h2>安装</h2>

<p>安装 Docker, Arch Linux 仓库里很早就有，非常方便：<code>sudo pacman -S docker</code>。完成之后启动他：<code>sudo systemctl start docker</code>。</p>

<p>之后我们拉一个 ubuntu 的镜像下来：<code>docker pull ubuntu</code>。</p>

<p>完成之后，我们启动一个 container，做一些基本的 setup：<code>docker run -i -t ubuntu:14.04 /bin/bash</code></p>

<p>这相当与运行在 ubuntu:14.04 这个镜像上运行一个 shell，接下来就进入了这个 shell 环境，和 ubuntu 安装版本完全一致，我们做一些基础的准备，安装一些必要的工具：<code>apt-get install build-essentials git curl libssl-dev</code></p>

<p>之后，就可以下载 Rust 提供的脚本来安装 nightly 版本了：<code>curl -s http://www.rust-lang.org/rustup.sh &gt; rustup</code></p>

<p>这里有个问题，rustup 脚本判断64位系统时会出错导致安装失败：
<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c"># Detect 64 bit linux systems with 32 bit userland and force 32 bit compilation</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$CFG<em>OSTYPE</span> <span class="o">=</span> unknown-linux-gnu -a <span class="nv">$CFG</em>CPUTYPE</span> <span class="o">=</span> x86<em>64 <span class="o">]</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">then
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    </span>file -L <span class="s2">&quot;</span><span class="nv">$SHELL</span><span class="s2">&quot;</span> | grep -q <span class="s2">&quot;x86[</em>-]64&quot;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>        </span><span class="nv">CFG_CPUTYPE</span><span class="o">=</span>i686
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">fi
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>fi</span></div></div></pre></div></figure></p>

<p>因为在我的机器上已知系统是64位，就强行绕过了他的判断。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$CFG_OSTYPE</span> <span class="o">=</span> unknown-linux-gnu -a <span class="nv">$CFG_CPUTYPE</span> <span class="o">=</span> x86_64 <span class="o">]</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">then
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    </span>file -L <span class="s2">"</span><span class="nv">$SHELL</span><span class="s2">"</span> | grep -q <span class="s2">"x86[_-]64"</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="o">==</span> 0 <span class="o">]</span>; <span class="k">then
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>        </span><span class="nv">CFG_CPUTYPE</span><span class="o">=</span>i686
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">fi
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>fi</span></div></div></pre></div></figure>

<p>之后执行 rustup 就可以直接安装最近的 rustc 和 cargo 了。安装完成执行 <code>rustc -v</code> 和 <code>cargo --version</code> （两个工具还不统一！）可以了解安装情况。</p>

<p>exit 退出 shell，commit 你的镜像，这样一个干净的镜像要好好保存：<code>docker commit IMAGE_ID sunng/rust-nightly</code></p>

<h2>Hello World</h2>

<p>之后可以写点代码了，我们不在 docker 里写，我们在 host 机器上写，然后挂载到 docker 上，因此 emacs 什么的也不用配置了。</p>

<p>创建一个目录，比如在 <code>$HOME/var/docker/helloworld</code>下，最简单的 rust 项目只要两个文件： <code>Cargo.toml</code> 和 <code>src/main.rs</code>。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>#Cargo.toml
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>[package]
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>name = "hello-world"
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>version = "0.1.0"
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>authors = [ "sunng@about.me" ]</div></div></pre></div></figure>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c">//main.rs</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="nd">println!</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div></pre></div></figure>

<p>构建项目不需要手动 rustc 了，那是上个世纪的东西，我们直接 <code>cargo build</code> 就可以：<code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly cargo build</code></p>

<p>其中 <code>-v</code> 参数用于挂载目录，<code>-w</code> 参数指定执行的 pwd。</p>

<p>如果构建成功，就可以执行了，在 docker 中执行：<code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly target/hello-world</code></p>

<p>其实可以直接在 host 系统里执行也是完全可以的：<code>$HOME/var/docker/helloworld/target/hello-world</code>。</p>

<h2>Web Hello World</h2>

<p>前面说了 Rust 都有 web 框架了，我们就写一个 Web 版本的 Hello World 吧。这次用 Iron 框架，首先添加依赖到 Cargo 文件：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>[package]
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>name = "hello-world"
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>version = "0.1.0"
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>authors = [ "sunng@about.me" ]
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>[dependencies.iron]
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>git = "https://github.com/iron/iron.git"
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>[dependencies.core]
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>git = "https://github.com/iron/core.git"</div></div></pre></div></figure>

<p>Cargo 目前还没有中央仓库，但是<a href="http://crates.io/faq.html#github">据说将来会有</a>。目前还都是用 git 仓库来直接添加，所以构建环境里必须要有 git。</p>

<p>照着 <a href="https://github.com/iron/iron/blob/master/examples/hello.rs">Iron 的例子</a>写一个最简单的 hello world 程序。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">iron</span><span class="p">;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">http</span><span class="p">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="nn">net</span><span class="p">::</span><span class="nn">ip</span><span class="p">::</span><span class="n">Ipv4Addr</span><span class="p">;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">use</span> <span class="nn">iron</span><span class="p">::&#x7b;</span><span class="n">Iron</span><span class="p">,</span> <span class="n">Server</span><span class="p">,</span> <span class="n">Chain</span><span class="p">,</span> <span class="n">Request</span><span class="p">,</span> <span class="n">Response</span><span class="p">,</span> <span class="n">Alloy</span><span class="p">,</span> <span class="n">Status</span><span class="p">,</span> <span class="n">Unwind</span><span class="p">,</span> <span class="n">FromFn</span><span class="p">&#x7d;;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">use</span> <span class="nn">http</span><span class="p">::</span><span class="n">status</span><span class="p">;</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Request</span><span class="p">,</span> <span class="n">res</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Response</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Alloy</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Status</span> <span class="p">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">res</span><span class="nf">.serve</span><span class="p">(</span><span class="nn">status</span><span class="p">::</span><span class="nb">Ok</span><span class="p">,</span> <span class="s">"Hello, world!"</span><span class="p">);</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="n">Unwind</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">let</span> <span class="k">mut</span> <span class="n">server</span><span class="p">:</span> <span class="n">Server</span> <span class="o">=</span> <span class="nn">Iron</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">server</span><span class="py">.chain</span><span class="nf">.link</span><span class="p">(</span><span class="nn">FromFn</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">hello_world</span><span class="p">));</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">server</span><span class="nf">.listen</span><span class="p">(</span><span class="nf">Ipv4Addr</span><span class="p">(</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div></pre></div></figure>

<p>编译 <code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly cargo build</code></p>

<p>运行 <code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld -p 3000:3000 sunng/nightly target/hello-world</code></p>

<p>新增的参数<code>-p</code>是把 docker 环境里的端口3000映射到 host 上的3000，这样我们才能在外面访问。</p>

<p>最后还有一个问题，因为程序听的是127.0.0.1，所以在 host 上是无法访问这个端口的，修改代码：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">server</span><span class="nf">.listen</span><span class="p">(</span><span class="nf">Ipv4Addr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span></div></div></pre></div></figure>

<p>就可以正常工作了。</p>

<h2>Wrap up</h2>

<p>总结一下上面用 docker 比虚拟机的好处：</p>

<ul>
<li>占用资源少，启动快</li>
<li>与 host 共享网络、硬盘都非常方便，满足开发需要不成问题</li>
<li>所有都是命令，与 host 系统上的进程集成也非常方便</li>
<li>支持镜像的版本控制和仓库</li>
</ul>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Rust语言：安全的并发</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2014/04/20/rust-concurrent-made-safely/"/>
    
    <id>/blog/2014/04/20/rust-concurrent-made-safely</id>
    <published>2014-04-20T16:31:54+08:00</published>
    <updated>2014-04-20T16:31:54+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>本文原载于2014年3月《程序员》杂志编程语言专题。</p>

<p>Rust 语言是近两年来 Mozilla 正在开发的一种新编程语言，它以并发，安全和实用为口号，主要使用场景是系统编程，用来取代C++语言的角色。有人戏称 Mozilla 由于大量使用 C++，深知其弊端，所以诞生了 Rust。目前，Rust 的两个主要产品是 Mozilla 下一代的浏览器布局引擎 Servo 和 Rust 编译器。由于语言在快速的开发和演进中，每个版本都会产生一些不兼容的变更，所以现在并非是学习这门语言细节并真正使用它的最佳时机。不过，这并不影响我们了解 Rust 语言：作为多年来鲜有的新系统编程语言，他本身有很多新颖之处，也可以帮助我们了解一些编程语言设计的流行趋势。</p>

<h2>并发</h2>

<p>和现在流行的很多新语言一样，Rust 在语言层面支持了绿色线程（Green threads）：Task。Task 作为并发执行的单元，是用户空间的“线程”，创建和调度成本较低，可以大量共存。Task之间通过消息传递通信，没有直接的共享数据。从最近的流行趋势来看，绿色线程几乎已经成为并发方案大战最终的赢家。除了Rust，之前流行的Go语言，Erlang，Python的Gevent，以及最近Clojure世界里正在发展的core.async，采用的都是这种绿色线程的模式。</p>

<p>绿色线程的程序与传统多线程程序的写法几乎一致。在编写服务器程序时，与事件驱动的回调机制相比，编写更简单，表义更清晰。当并发任务增多时，传统的多线程程序由于启动线程和调度线程的成本高而使系统整体性能降低。而绿色线程可以基本不受限制，随意创建。Rust的文档指出在32位系统上可以支持数十万个Task同时存在。</p>

<p>Task也是Rust程序的基础单元，一个Rust进程又多个并行的task组成，main函数本身也是一个Task。Task之间通过一个 (Port, Chan) 元组传递数据。Port和Chan相当于管道的两端，Port用于取数据，Chan用于发送数据。下面的例子里，我们通过do spawn语法（类似Ruby的block语法），启动一个新Task，并打印收到的数据。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">main</span><span class="p">()&#x7b;</span> 
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">"hello world"</span><span class="p">;</span> 
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">let</span> <span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">chan</span><span class="p">)</span> <span class="o">=</span> <span class="nn">Chan</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span> 
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="n">chan</span><span class="nf">.send</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span> 
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="k">do</span> <span class="n">spawn</span> <span class="p">&#x7b;</span> 
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">let</span> <span class="n">received_msg</span> <span class="o">=</span> <span class="n">port</span><span class="nf">.recv</span><span class="p">();</span> 
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nf">println</span><span class="p">(</span><span class="n">received_msg</span><span class="p">);</span> 
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  <span class="p">&#x7d;</span> 
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span> 
</div></div></pre></div></figure>

<h2>引用系统</h2>

<p>Rust 语言设计的核心是安全性（这里安全性指safety，而非 security）。Rust 希望通过语言的机制和编译器的功能，把程序员易于犯错，不易检查的问题解决在编译期，避免运行时的Segmentation Fault。Rust 的设计可以说是处处小心。Clojure语言强调可变性给编程带来的复杂性，在 Rust 语言中，设计者对这点也有格外的重视。除非特别声明为 mut，所有 Rust 的局部变量默认都是不可变的，对不可变变量值的修改会导致 编译器直接报错。</p>

<p>Rust 的安全性还通过独有的引用类型系统来实现。</p>

<p>Rust 语言中堆内存块的引用类型叫做box。最新版本的Rust 在语言层面只保留了一种owned box，它在使用时具有一种所有权（ownership）的概念，只有具有所有权的变量才可以访问这段内存。Owned box在同一时刻只允许一个变量作为所有者，它的变量赋值称为move。一旦owned pointer被赋值，用户就无法通过原先的引用访问这块数据，这种错误会在编译时检查。
一个简单的例子：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">let</span> <span class="n">a</span><span class="p">:</span> <span class="o">~</span><span class="nb">int</span> <span class="o">=</span> <span class="o">~</span><span class="mi">50</span><span class="p">;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">let</span> <span class="n">b</span><span class="p">:</span> <span class="o">~</span><span class="nb">int</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nd">println!</span><span class="p">(</span><span class="s">"&#x7b;:?&#x7d;"</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure>

<p>~ 代表owned box，这里我们把一个包含值为50的owned box赋给owned pointer a。然后把a的所有权通过赋值的形式move给b。最后我们试图通过 <code>*a</code> 访问这个值。在C语言里，这时a和b同时指向统一块内存，可以通过<code>*a</code>访问到这里的值。但Rust的所有权机制给予了这段内存额外的保护。编译这段程序将失败：</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>own.rs:4:23: 4:24 error: use of moved value: `a`
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>own.rs:4     println!("&#x7b;:?&#x7d;", *a);
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>                               ^
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>...
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>own.rs:3:9: 3:10 note: `a` moved here because it has type `~int`, which is moved by default (use `ref` to override)
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>own.rs:3     let b: ~int = a;
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>                 ^
</div></div></pre></div></figure>

<p>编译器会明确地指出错误的引用在何处被move。事实上所有owned box的生命周期管理都是直接在编译时完成的，编译器通过静态检查跟踪使用情况，完成内存开辟和回收。这是Rust 确保编程正确、安全的重要手段。</p>

<p>新版本的Rust在标准库中提供 <code>std::rc::Rc</code>（引用计数） 和 <code>std::gc::Gc</code> （垃圾回收）类型，取代了原先的managed box，用来提供可以有限共享的引用类型。</p>

<p>在 Task 间传递数据，如果要避免数据拷贝，也有专门的引用类型：用于不可变数据的<code>extra::arc::Arc</code> (atomically reference counted ，原子的引用计数类型) , 以及用于可变数据的 RWArc（带读写锁的原子引用计数类型） 。RWArc在操作可变数据时，通过内在的读写锁控制对共享数据的访问，从而在API层面实现安全性。</p>

<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">extern</span> <span class="k">mod</span> <span class="n">extra</span><span class="p">;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">use</span> <span class="nn">extra</span><span class="p">::</span><span class="nn">arc</span><span class="p">::&#x7b;</span><span class="n">RWArc</span><span class="p">&#x7d;;</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">&#x7b;</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="o">~</span><span class="s">"hello world"</span><span class="p">;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">let</span> <span class="n">arc_ref</span> <span class="o">=</span> <span class="nn">RWArc</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="k">let</span> <span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">chan</span><span class="p">)</span> <span class="o">=</span> <span class="nn">Chan</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="n">chan</span><span class="nf">.send</span><span class="p">(</span><span class="n">arc_ref</span><span class="nf">.clone</span><span class="p">());</span>
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="k">do</span> <span class="n">spawn</span> <span class="p">&#x7b;</span>
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="k">let</span> <span class="n">arc_local_ref</span> <span class="o">=</span> <span class="n">port</span><span class="nf">.recv</span><span class="p">();</span>
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="n">arc_local_ref</span><span class="nf">.write</span><span class="p">(|</span><span class="nb">str</span><span class="p">|</span> <span class="p">&#x7b;</span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'>                <span class="nb">str</span><span class="nf">.push_char</span><span class="p">(</span><span class="sc">'!'</span><span class="p">);</span>
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="p">&#x7d;);</span>
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="n">arc_local_ref</span><span class="nf">.read</span><span class="p">(|</span><span class="nb">str</span><span class="p">|</span> <span class="p">&#x7b;</span>
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>                <span class="nf">println</span><span class="p">(</span><span class="o">*</span><span class="nb">str</span><span class="p">);</span>
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>            <span class="p">&#x7d;);</span>
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="p">&#x7d;</span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;</span>
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span></div></div></pre></div></figure>

<p>Rust谨慎地定义如此繁多，各具功能的引用类型，就是希望用户在编程过程中，根据应用场景、引用的功能职责，选择合适的类型，进而在引用类型系统和编译器的保护下，减少在运行时出错的机会。这一点也和Clojure的4种引用类型的设计初衷类似，不过Clojure并不能提供太多编译时的安全保护。</p>

<h2>更多</h2>

<p>篇幅所限，我只选择了Rust最具特点的两个部分介绍。Rust是一门具备自身显著特点，精心设计的语言，而绝非普通的“又一门编程语言”。在语法层面，它包含了模式匹配，闭包，泛型等流行功能，作为系统编程语言，使用的舒适度不亚于脚本语言。另外还可以通过FFI（Foreign Function Interface）调用已有的C语言库，满足了实用性的需要。</p>

<p>如果你也开始对这门新语言感兴趣，可以：</p>

<ul>
<li>通过<a href="http://static.rust-lang.org/doc/master/tutorial.html">它的文档</a>学习最新版本的语法和细节 </li>
<li>加入<a href="https://mail.mozilla.org/listinfo/rust-dev">rust-dev邮件列表</a>了解开发者的讨论</li>
<li>关注<a href="https://github.com/mozilla/rust">Rust项目代码仓库</a></li>
<li>关注<a href="https://delicious.com/tag/rust">Delicious</a> 和 <a href="http://www.reddit.com/r/rust">Reddit</a> 上流行的 rust 链接</li>
<li>关注<a href="http://cmr.github.io/">The week in Rust</a>，介绍每周 Rust 语言正在发生的变化</li>
</ul>



]]>
    </content>
  </entry>

</feed>
