<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ANN | Here comes the Sun]]></title>
  <link href="http://sunng87.github.io/blog//blog/categories/ann/atom.xml" rel="self"/>
  <link href="http://sunng87.github.io/blog//"/>
  <updated>2014-07-07T21:59:43+08:00</updated>
  <id>http://sunng87.github.io/blog//</id>
  <author>
    <name><![CDATA[Sun Ning]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Checkout Ring Adapter for Jetty 9]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/04/24/checkout-ring-adapter-for-jetty-9/"/>
    <updated>2013-04-24T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/04/24/checkout-ring-adapter-for-jetty-9</id>
    <content type="html"><![CDATA[<p>The Clojure world has been using Jetty 7 for quite a long time because it's supported by the Ring development team. However, Jetty 9 brings us exciting features like WebSocket and SPDY. In order to use websocket in my Clojure web application, I built this adapter last weekend.</p>




<p>[info.sunng/ring-jetty9-adapter "0.1.0"]</p>




<p>The API for Clojure is still consistent with the one for jetty 7.<br />
[cc lang="clojure"]<br />
(use 'ring.adapter.jetty9)<br />
(run-jetty app {})<br />
[/cc]</p>




<p>Options supported in jetty 9 are almost same as jetty 7 except the configurator is dropped. And a new "WebSockets" option is added. Accepting a map of context path and websocket class, it enables websocket protocol in your web application.</p>




<p>[cc lang="clojure"]<br />
(use 'ring.adapter.jetty9)<br />
(run-jetty app {:websockets {"/loc" LocationTracker}})<br />
[/cc]</p>




<p><p>Due to the lack of WebSocket API standards, I don&rsquo;t spend time on the WebSocket abstraction. Just use Jetty&rsquo;s internal API for websocket. Here is a typical implementation of websocket listener.<br />
``` clojure
;; sample code
(ns xxx.ws.location
  (:gen-class
   :name xxx.LocationTracker
   :init init
   :state state
   :extends org.eclipse.jetty.websocket.api.WebSocketAdapter
   :prefix ws-
   :exposes-methods {onWebSocketConnect superOnWebSocketConnect})
  (:require [clojure.data.json :as json]</p>

<pre><code>        [clojure.tools.logging :as logging]
        [monger.collection :as mc])
</code></pre>

<p>  (:import (org.eclipse.jetty.websocket.api WebSocketAdapter)</p>

<pre><code>       (java.util UUID)))
</code></pre>

<p>(defn ws-init []
  [[] {:client-id (str (UUID/randomUUID))}])</p>

<p>(defn ws-onWebSocketConnect [this session]
  (.superOnWebSocketConnect this session)
  (logging/warn &ldquo;new connection: &rdquo; (get-client-id this))</p>

<p>(defn ws-onWebSocketText [this message]
  (let [msg (json/read-json message)]</p>

<pre><code>(case (:type msg)
  ...)))
</code></pre>

<p>(defn ws-onWebSocketClose [this status reason]
  (logging/debug &ldquo;close socket&rdquo;))
```</p>

<p><p>Since Jetty will create new instance of adapter for each connection, it requires heavy usage of &ldquo;gen-class&rdquo; . Remember to add the namespace to AOT compilation. Detailed Jetty API spec can be found <a href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/WebSocketAdapter.html" target="_blank">here</a>.<br /></p>

<p>And also find the project is <a href="https://github.com/sunng87/ring-jetty9-adapter" target="_blank">here</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ANN] Handlebars Clojure API]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/04/12/ann-handlebars-clojure-api/"/>
    <updated>2013-04-12T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/04/12/ann-handlebars-clojure-api</id>
    <content type="html"><![CDATA[<p>The ONLY real-world modern clojure templating system. <br />
I just can't believe that the clojure world doesn't build web application with server-side template.<br />
hiccup and enlive are neither **real-world**. So people tends to use single page architecture for a clojure backend. That's PAINFUL.</p>




<p>Available on clojars [hbs "0.4.1"], code and docs on <a href="https://github.com/readwise/hbs" target="_blank">github</a>. We have been using hbs on <a href="http://readwise.net" target="_blank">readwise.net</a> for a long time.</p>




<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANN 美味爱读 readwise.net]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/12/05/ann%E7%BE%8E%E5%91%B3%E7%88%B1%E8%AF%BB-readwise-net/"/>
    <updated>2012-12-05T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/12/05/ann美味爱读-readwise-net</id>
    <content type="html"><![CDATA[<p>诚惶诚恐地，但是还是得把这盘菜捧出来给大家尝尝。</p>




<p>我们的新产品，<a href="http://readwise.net/" target="_blank">美味爱读(ReadWise)</a>现在正式开放帐号申请了。</p>




<p>从哪里说起呢，美味书签，包括整个AVOS都在做信息提取相关的互联网产品，美味爱读依然延续的这个路线。美味爱读是一个阅读产品，不过与市面上其他的类似产品相比，我们有点不同。</p>




<p>首先，我们通过技术手段，给每天抓取到的RSS文章打上粒度极细的标签（就像Delicious那样的tag），初到网站时，您可以选择自己感兴趣的几个标签，从而获得相关的新文章。
<img src="http://i.imgur.com/UsPfE.png" alt="" /></p>




<p>其二，我们会跟踪文章在互联网上的传播情况，在微博和twitter上的引用次数，借此来判断它的价值，影响它在阅读器里的位置。我们还会从这些网站抓取用户的评论，看看别人如何说。
<img src="http://i.imgur.com/Qxncb.png" alt="" /></p>




<p>由于时间和资源有限，初期我们还只有技术和科技相关的内容。其中有很多英文，有的用户可能会对此存在疑问。考虑这个领域有的特殊性，为了保证信息的质量，我们最后还是决定不回避这些英文内容。这恐怕也是开了先河，既然要不同，那就要不同地彻底。当然很快随着领域的扩大，内容的增加，高质量的中文文章肯定会越来越多。
<img src="http://i.imgur.com/A3t71.png" alt="" /></p>




<p>我们采用的responsive UI可以在各种分辨率的屏幕上工作，所以Android的Chrome和iPhone的浏览器也可以直接访问，不用担心。
<img src="http://i.imgur.com/WexJU.png" alt="" /></p>




<p>最后，在阅读的UI上，可以用键盘J/K查看文章，O打开链接，M标记收藏。之所以强调一下，是因为这是一个工程师驱动的产品，这样的小功能是必备的。</p>




<p>这是我来北京后的第一个完整的项目，参与了从原型到初期开发，到现在的开放邀请，经历了宝贵的从无到有的过程。现在终于推开门，迈出第一步。</p>




<p>产品的详细介绍，请移步我们的<a href="http://readwise.net/blog/12-17-2012/this-is-our-ann.html" target="_blank">产品博客</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heatcanvas Is Available via Bower]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/11/19/heatcanvas-is-available-via-bower/"/>
    <updated>2012-11-19T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/11/19/heatcanvas-is-available-via-bower</id>
    <content type="html"><![CDATA[<p>The heat map toolkit, heatcanvas, is now available via twitter's package management tool, bower.</p>




<p>You can now install heatcanvas with a single command:</p>




<p>bower install heatcanvas</p>




<p>Enjoy this library.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exaile 豆瓣电台插件 0.0.13]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/11/12/exaile-%E8%B1%86%E7%93%A3%E7%94%B5%E5%8F%B0%E6%8F%92%E4%BB%B6-0-0-13/"/>
    <updated>2012-11-12T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/11/12/exaile-豆瓣电台插件-0-0-13</id>
    <content type="html"><![CDATA[<p>近来工作甚忙，一直没有精力来更新这个插件。加之exaile被archlinux清到了aur仓库，项目的前景亦是堪忧。恰好有两位热心网友@JoveYu和@watermelonlh在github上提出愿意帮助维护这个项目。两位都是很好的贡献者，用了一周左右的时间，居然看遍了我乱糟糟的代码，更看遍了Exaile更乱糟糟的代码。说干就干，还真让这个插件在Exaile 0.3.3健健康康地运行起来。而这段时间我没能给两位什么具体的帮助，着实惭愧。</p>




<p>不管怎样，现在我们又拥有了和原先一模一样的功能：
<img src="http://i.imgur.com/L3oqp.png" alt="" /></p>




<p>你可以在github找到这个项目并下载最新的版本：<br />
https://github.com/sunng87/exaile-doubanfm-plugin</p>




<p>同时，适用于GNOME 3.6的扩展也已经在审核中了，一旦成功，根据gnome-shell据说最新的自动更新功能，已经安装的用户可以直接更新的最新版本。
</p>

]]></content>
  </entry>
  
</feed>
