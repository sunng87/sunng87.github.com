<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[车水马龙]]></title>
  <link href="http://sunng87.github.io/blog//atom.xml" rel="self"/>
  <link href="http://sunng87.github.io/blog//"/>
  <updated>2013-07-16T21:13:26+08:00</updated>
  <id>http://sunng87.github.io/blog//</id>
  <author>
    <name><![CDATA[Sun Ning]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grunt for requirejs projects]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/07/05/grunt-for-requirejs-projects/"/>
    <updated>2013-07-05T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/07/05/grunt-for-requirejs-projects</id>
    <content type="html"><![CDATA[<p><h3>the Problem</h3></p>

<p>You have modularize your JavaScript project with requirejs. And you need a build tool for both development and deployment phases, helping you to organize, optimize the source code.</p>

<p><h3>the Solution</h3></p>

<p>Grunt has been the standard tool chain for web development. I used to think the grunt configuration file could be verbose and complicated, because the JavaScript world has never come up with a standard, even common, archetype (until yeoman, but it&#8217;s after Grunt). The projects are organized manually, or by some custom shell scripts. So grunt cannot take the advantage of &#8216;convention over configuration&#8217;, which Maven does well in the Java world.</p>

<p>This idea was changed until I use Grunt seriously. Grunt configuration parser has excellent support for expressions of &#8216;path&#8217;. You can use wildcards like &#8216;src/*.js&#8217;, &#8216;src/**/*.js&#8217;, [&#8216;src/**/*.js&#8217;, &#8216;vendor/lib/*.js&#8217;] and even more &#8216;path&#8217; to find and match your files. You don&#8217;t have to write your script name one-by-one. I&#8217;m sure Grunt developers have lots of experience on JavaScript development so they know the problem.</p>

<p>So I strongly recommend you to use Grunt to manage your JavaScript project, especially when it&#8217;s a large project.</p>

<p>Assume you have your JavaScript sources in &#8216;src&#8217;, and the &#8216;src/main.js&#8217; is the entry point of your requirejs modules.</p>

<p>The first step is to create a work directory for publishing your sources, say &#8216;public&#8217;, and also put your vendor scripts in &#8216;src/libs&#8217; Setup your first Grunt task, copy:dev. The <a href="https://github.com/gruntjs/grunt-contrib-copy">copy plugin</a> is one of the most used plugin for copying files. This will copy your source code from src/ to public/, as well as your vendor scripts.<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">copy: </span><span class="p">{</span>
</span><span class='line'>  <span class="nv">dev: </span><span class="p">{</span>
</span><span class='line'>    <span class="nv">files: </span><span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="nv">expand: </span><span class="kc">true</span><span class="p">,</span> <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;src/**/*.js&#39;</span><span class="p">],</span> <span class="nv">dest: </span><span class="s">&#39;public/js&#39;</span><span class="p">,</span> <span class="nv">filter: </span><span class="s">&#39;isFile&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then move your requirejs.config from html to your main.js. Require.js is able to read configuration after it loaded your entry script. This is of great helpful for optimized code.</p>

<p>In development phase, you can have your static server over &#8216;public&#8217;. For deployment, you need to optimize the JavaScript code: concat and uglify. This can be done with r.js, which is developed by requirejs project. Grunt also has a plugin to integrate r.js, <a href="https://github.com/gruntjs/grunt-contrib-requirejs">grunt-contrib-requirejs</a>. r.js could concat all requirejs modules by analyzing their dependency tree. You need a simple config for that:<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;src/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s2">&quot;src/main.js&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">out</span><span class="o">:</span> <span class="s2">&quot;public/js/main.js&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</p>

<p>The mainConfigFile is the JavaScript file contains requirejs.config. r.js can also parse it from a requirejs module. r.js will concat and uglify all your scripts, include vendor scripts in one file, output as &#8216;public/js/main.js&#8217;. With the same name of your entry point.</p>

<p>With that, you don&#8217;t have to change any single line of js/html for switching between deployment and development. During development, requirejs loads JavaScript files on demand. While on the production, it loads main.js with all dependencies combined in.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给 Raspberry Pi 添加一个显示 IP 的液晶屏]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/06/29/%E7%BB%99-raspberry-pi-%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA-ip-%E7%9A%84%E6%B6%B2%E6%99%B6%E5%B1%8F/"/>
    <updated>2013-06-29T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/06/29/给-raspberry-pi-添加一个显示-ip-的液晶屏</id>
    <content type="html"><![CDATA[<p>我的 Raspberry Pi 在家里一直是通过 DHCP 联网的，每次要登录上去都要先进路由管理界面看看他的 IP 到底是什么，很不方便。于是就买了这块液晶屏幕，准备显示一下 IP，另外以后也可以作为一个输出设备。毕竟用这个比外接一个显示器方便多了（现在显示器最小都是21寸）。</p>

<p>液晶屏就是最普通的1602屏幕，淘宝上有很多，基本上都一样。要注意的是需要自备引脚，要自己焊到板上，否则无法连接。我也是第一回焊，感觉还比较简单。(<a href="http://instagram.com/p/bIPSEcBM6R/" target="_blank">如图。</a>)另外为了控制液晶屏的对比度需要有一个电位器，为此我中途还专门跑了一趟中关村。</p>

<p>之后就可以按照 <a href="http://learn.adafruit.com/drive-a-16x2-lcd-directly-with-a-raspberry-pi/overview" target="_blank">Adafruit 上的教程</a>一步一步做了。</p>

<p>最后我简化了一下显示 IP 的脚本，时间就不去刷新了。
<script src="https://gist.github.com/sunng87/5890563.js"></script></p>

<p>把这个脚本作为 systemd 的服务，可以参考<a href="http://blog.sdbarker.com/adding-custom-units-services-to-systemd-on-arch-linux/" target="_blank">这里</a>有关如何创建自定义服务的说明。然后通过systemctl enable ip-display.service设置自启动。</p>

<p>最终效果如下：
<img src="http://i.imgur.com/ZqAc2dh.jpg" alt="my ip display setup" /></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纸上得来终觉浅]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/06/07/%E7%BA%B8%E4%B8%8A%E5%BE%97%E6%9D%A5%E7%BB%88%E8%A7%89%E6%B5%85/"/>
    <updated>2013-06-07T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/06/07/纸上得来终觉浅</id>
    <content type="html"><![CDATA[<p>之前看过无数的书无数的文章，讲可扩展性讲大型架构，不过真到了自己上场，毕竟还是没有从头到尾实践过，心里还有些没底。每做一个决定，每选定一个方案，心里都要反复打鼓，这是不是在给自己挖坑，是不是导致今后要浪费很多可乐咖啡的一个决定。第一份工作在盛大的时候，参与过这种规模比较大的项目，但是核心的部分，容量规划，性能评估，优化，都是那时的老大操心，我在一旁旁观。操心和旁观的区别大了去了，晚上睡不着的那几个小时，旁观的人享受不到，等来临的时候，就要如履薄冰地担着。</p>

<p>公司的团队构成跟硅谷类似，不存在专门的“产品经理”，负责人要从后端到前端，从开发到部署，从运维到监控，从代码到UI设计，产品甚至到运营，都需要有所操心。好在团队经过一年多的锻炼，技术成熟配合也默契，各司其职又都是三头六臂，能在这样的过程里成长，书里读不到。</p>

<p>一直是做互联网信息类的产品，现在自己制造的信息却越来越少，有些于心不忍，于是寥寥记录一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checkout Ring Adapter for Jetty 9]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/04/24/checkout-ring-adapter-for-jetty-9/"/>
    <updated>2013-04-24T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/04/24/checkout-ring-adapter-for-jetty-9</id>
    <content type="html"><![CDATA[<p>The Clojure world has been using Jetty 7 for quite a long time because it&#8217;s supported by the Ring development team. However, Jetty 9 brings us exciting features like WebSocket and SPDY. In order to use websocket in my Clojure web application, I built this adapter last weekend.</p>

<p>[info.sunng/ring-jetty9-adapter &#8220;0.1.0&#8221;]</p>

<p>The API for Clojure is still consistent with the one for jetty 7.<br />
[cc lang=&#8221;clojure&#8221;]<br />
(use &#8216;ring.adapter.jetty9)<br />
(run-jetty app {})<br />
[/cc]</p>

<p>Options supported in jetty 9 are almost same as jetty 7 except the configurator is dropped. And a new &#8220;WebSockets&#8221; option is added. Accepting a map of context path and websocket class, it enables websocket protocol in your web application.</p>

<p>[cc lang=&#8221;clojure&#8221;]<br />
(use &#8216;ring.adapter.jetty9)<br />
(run-jetty app {:websockets {&#8220;/loc&#8221; LocationTracker}})<br />
[/cc]</p>

<p>Due to the lack of WebSocket API standards, I don&#8217;t spend time on the WebSocket abstraction. Just use Jetty&#8217;s internal API for websocket. Here is a typical implementation of websocket listener.<br />
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; sample code</span>
</span><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">xxx.ws.location</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span>
</span><span class='line'>   <span class="ss">:name</span> <span class="nv">xxx.LocationTracker</span>
</span><span class='line'>   <span class="ss">:init</span> <span class="nv">init</span>
</span><span class='line'>   <span class="ss">:state</span> <span class="nv">state</span>
</span><span class='line'>   <span class="ss">:extends</span> <span class="nv">org.eclipse.jetty.websocket.api.WebSocketAdapter</span>
</span><span class='line'>   <span class="ss">:prefix</span> <span class="nv">ws-</span>
</span><span class='line'>   <span class="ss">:exposes-methods</span> <span class="p">{</span><span class="nv">onWebSocketConnect</span> <span class="nv">superOnWebSocketConnect</span><span class="p">})</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.data.json</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.tools.logging</span> <span class="ss">:as</span> <span class="nv">logging</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">monger.collection</span> <span class="ss">:as</span> <span class="nv">mc</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">(</span><span class="nf">org.eclipse.jetty.websocket.api</span> <span class="nv">WebSocketAdapter</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">java.util</span> <span class="nv">UUID</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ws-init</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[[]</span> <span class="p">{</span><span class="ss">:client-id</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">UUID/randomUUID</span><span class="p">))}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ws-onWebSocketConnect</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">session</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">.superOnWebSocketConnect</span> <span class="nv">this</span> <span class="nv">session</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">logging/warn</span> <span class="s">&quot;new connection: &quot;</span> <span class="p">(</span><span class="nf">get-client-id</span> <span class="nv">this</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ws-onWebSocketText</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">message</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">msg</span> <span class="p">(</span><span class="nf">json/read-json</span> <span class="nv">message</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="ss">:type</span> <span class="nv">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">...</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ws-onWebSocketClose</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">status</span> <span class="nv">reason</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">logging/debug</span> <span class="s">&quot;close socket&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>Since Jetty will create new instance of adapter for each connection, it requires heavy usage of &#8220;gen-class&#8221; . Remember to add the namespace to AOT compilation. Detailed Jetty API spec can be found <a href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/WebSocketAdapter.html" target="_blank">here</a>.<br />
 
And also find the project is <a href="https://github.com/sunng87/ring-jetty9-adapter" target="_blank">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ANN] Handlebars Clojure API]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/04/12/ann-handlebars-clojure-api/"/>
    <updated>2013-04-12T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/04/12/ann-handlebars-clojure-api</id>
    <content type="html"><![CDATA[<p>The ONLY real-world modern clojure templating system. <br />
I just can&#8217;t believe that the clojure world doesn&#8217;t build web application with server-side template.<br />
hiccup and enlive are neither **real-world**. So people tends to use single page architecture for a clojure backend. That&#8217;s PAINFUL.</p>

<p>Available on clojars [hbs &#8220;0.4.1&#8221;], code and docs on <a href="https://github.com/readwise/hbs" target="_blank">github</a>. We have been using hbs on <a href="http://readwise.net" target="_blank">readwise.net</a> for a long time.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一个开关]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/02/23/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%80%E5%85%B3/"/>
    <updated>2013-02-23T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/02/23/第一个开关</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/3S4WPUG.jpg" alt="" /></p>

<p>过年回家路上无聊看了一些关于电子制作的书，知道了 Android 上的开发板 IOIO。另外认识了 Arduino 的程序，感觉要比想象中还要简单。本来担心还要学一门新的语言，看了之后发现完全是多虑。</p>

<p>在淘宝上找 IOIO 的时候正好发现了<a href="http://item.taobao.com/item.htm?id=13115078082">一整套元件</a>。买回来以后看看可能价格是贵了，但是对我这样的新手来说，省去了自己找元件的麻烦。因为找元件实在是很容易让人退缩。</p>

<p>点亮 Arduino 基本上没什么问题。但是在 Archlinux 上访问 serial port 需要一些配置。首先要把用户加入 uucp 组确保可以访问 /dev/tty* 的设备。其次，需要给当前用户访问 /run/lock 的权限，否则 Arduino IDE 还是无法访问到 Arduino，这点在 Archlinux 的 Wiki 上有提及。</p>

<p>我这个开关电路太简单了就不详细说了，参考书是一本 Getting started with Arduino。据说这本书出第二版了，第一版上 Arduino 的版本不是 Uno，所以图片有一些出入，不过接口都没有变化。这第一个二极管开关的电路还是挺有成就感的，晚上我就可以让台灯什么的都退了休吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R/W Update#1: 更好的时间线]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/01/31/1307/"/>
    <updated>2013-01-31T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/01/31/1307</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/wReNhae.jpg" alt="" /></p>

<p>这周的工作，界面上能展示的不多。我们对时间线做了比较大的手术。</p>

<p>原先的时间线的工作机制，是以☐☐☐☐☐☐☐☐☐☐☐☐☐（此处省略200字）。这样的机制有两个明显的问题：
<ol /></p>

<p>	<li>    看过和没有看过的文章常常交错在一起，让人迷惘</li></p>

<p> 	<li>   一夜过后，时间线上出现很神奇的情况，文章的热度排列为「冷…热…冷…热…」</li>
</p>

<p>不仅是很多用户，我自己使用的过程中也感到很不方便。于是我们痛下决心，抄起键盘对时间线大刀阔斧一番。 一小时前上线的版本已经基本解决了上面提到的问题。如若问题依旧，请参考题图。</p>

<p>还有可以提一句，用户名旁边显示的数字是你的 Karma。目前 Karma 可以通过评论和评论被投票获得。</p>

<p><img src="http://i.imgur.com/tqjVRN6.png" alt="" /></p>

<p>还有什么比工程师写得产品博客更平淡的，而且他还要一边 test on production。</p>

<p>对对对，我们的工程师 <a href="https://github.com/debugger87/">debugger87</a> 昨天回家结婚，顺便过年了，我们祝他新婚愉快。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStreetMap Nanjing: A Year of Edits, 2012]]></title>
    <link href="http://sunng87.github.io/blog//blog/2013/01/09/openstreetmap-nanjing-a-year-of-edits-2012/"/>
    <updated>2013-01-09T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2013/01/09/openstreetmap-nanjing-a-year-of-edits-2012</id>
    <content type="html"><![CDATA[<p>又到了A Year of Edits节目时间了，去年的场景还<a href="http://sunng.info/blog/2012/01/openstreetmap-nanjing-a-year-of-edits/" target="_blank">历历在目</a>。2012年OSM上的南京地图，变化更加可观。</p>

<p><img src="http://i.imgur.com/S4OSv.png" alt="" /></p>

<p>脚本和mapnik依然在<a href="https://gist.github.com/1639915" target="_blank">原处</a>，mapnik升级到2.1.x，配置文件有了一些变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSM reporter]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/12/24/osm-reporter/"/>
    <updated>2012-12-24T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/12/24/osm-reporter</id>
    <content type="html"><![CDATA[<p>好久没有Weekend project了，礼拜天给一个叫作<a href="https://github.com/timlinux/osm-reporter">osm reporter</a>的小项目写了一点代码。这个小程序的功能很简单，显示指定区域里建筑物的贡献者情况。</p>

<p>我做了一些修改，增加了道路贡献情况。还有，利用自己的heatcanvas库显示用户个人编辑的分布情况。</p>

<p><a href=" http://reporter.fluv.io/?bbox=118.51638793945312,31.92943755974919,119.16183471679688,32.133175697091374&obj=highway">这里</a>有一个live demo，显示南京的编辑情况，不幸而又庆幸的是，离开南京大半年，我已经远远落后于sinopitt了。</p>

<p>这个项目的缘起：<a href="http://linfiniti.com/2012/12/holiday-openstreetmap-project-for-swellendam/">http://linfiniti.com/2012/12/holiday-openstreetmap-project-for-swellendam/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[螺旋发展的技术]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/12/21/%E8%9E%BA%E6%97%8B%E5%8F%91%E5%B1%95%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    <updated>2012-12-21T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/12/21/螺旋发展的技术</id>
    <content type="html"><![CDATA[<p>那个谁说世界是螺旋发展的，我说也真是。</p>

<p>现在的云计算潮流，经常能听到哪个地方哪个企业又推广云办公了，大家只要有一个显示器一样的瘦终端就可以连到云中，走到哪办公到哪。可是一想，这不就是黑客时代的主机/终端架构吗，一个用作输入输出的终端，连接到用于运算的主机上。当然，这里又可以说出千差万别（要不然这30年也白活了），但是至少大方面上他们是相同的。</p>

<p>再说这两年流行的移动应用开发，让我想到快十年前那阵的很多共享软件。那会大家还学个Windows的桌面开发，MFC什么的。后来一阵所谓B/S架构的风刮起来，人们一夜之间都不屑于做这种桌面开发了。当时几个论据，跨平台的问题，软件分发的问题，确实得到了很好的解决。但是iphone流行起来以后，仿佛一夜之间又回到了桌面开发的时代。跨平台和软件分发的事也没人提了，辛辛苦苦地为了各种分辨率做设计，做测试，似乎看起来都不是个事。因为人们发现，还是本地应用的体验好。可是谁又能保证也许有那么一天，当本地应用的优势不再那么明显的时候，大家又会谈起跨平台，软件分发的事。</p>

<p>说到跨平台了，Java的WORA（write once, run anywhere）当年是很大的卖点。可后来人们发现，好像也没这个必要，WOCA可以，退一步各个平台开发也不是事。不过又过了这么多年，平台越来越多了，光手机就三四个，这样的事恐怕又要被提起了。</p>

<p>最后再说个小的。当年的网页用表格布局，后来被我们俗称div+css的组合横扫了，以至于用表格布局最后都不好意思跟人打招呼。这么些年过去了，人们发现自己其实真真切切地需要用表格布局，但是为了体现时代的进步，现在叫做grid layout。看看微软提得CSS 3的grid属性：<br />
[cc lang=&#8221;css&#8221;]<br />
grid-column: 1; grid-column-span: 3; grid-row: 1;<br />
[/cc]</p>

<p>活脱一个table里的colspan。</p>

<p>当然，其实还是发展了，原先写在html里的东西，现在用css就可以解决。和前面的例子一样，看似一样，但是都是绕了回来。不好说是从弯路绕回直路，还是相反。在一个时期是正确的，待一些客观条件成熟了，也许换回原来的方式也是正确的。</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANN 美味爱读 readwise.net]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/12/05/ann%E7%BE%8E%E5%91%B3%E7%88%B1%E8%AF%BB-readwise-net/"/>
    <updated>2012-12-05T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/12/05/ann美味爱读-readwise-net</id>
    <content type="html"><![CDATA[<p>诚惶诚恐地，但是还是得把这盘菜捧出来给大家尝尝。</p>

<p>我们的新产品，<a href="http://readwise.net/" target="_blank">美味爱读(ReadWise)</a>现在正式开放帐号申请了。</p>

<p>从哪里说起呢，美味书签，包括整个AVOS都在做信息提取相关的互联网产品，美味爱读依然延续的这个路线。美味爱读是一个阅读产品，不过与市面上其他的类似产品相比，我们有点不同。</p>

<p>首先，我们通过技术手段，给每天抓取到的RSS文章打上粒度极细的标签（就像Delicious那样的tag），初到网站时，您可以选择自己感兴趣的几个标签，从而获得相关的新文章。
<img src="http://i.imgur.com/UsPfE.png" alt="" /></p>

<p>其二，我们会跟踪文章在互联网上的传播情况，在微博和twitter上的引用次数，借此来判断它的价值，影响它在阅读器里的位置。我们还会从这些网站抓取用户的评论，看看别人如何说。
<img src="http://i.imgur.com/Qxncb.png" alt="" /></p>

<p>由于时间和资源有限，初期我们还只有技术和科技相关的内容。其中有很多英文，有的用户可能会对此存在疑问。考虑这个领域有的特殊性，为了保证信息的质量，我们最后还是决定不回避这些英文内容。这恐怕也是开了先河，既然要不同，那就要不同地彻底。当然很快随着领域的扩大，内容的增加，高质量的中文文章肯定会越来越多。
<img src="http://i.imgur.com/A3t71.png" alt="" /></p>

<p>我们采用的responsive UI可以在各种分辨率的屏幕上工作，所以Android的Chrome和iPhone的浏览器也可以直接访问，不用担心。
<img src="http://i.imgur.com/WexJU.png" alt="" /></p>

<p>最后，在阅读的UI上，可以用键盘J/K查看文章，O打开链接，M标记收藏。之所以强调一下，是因为这是一个工程师驱动的产品，这样的小功能是必备的。</p>

<p>这是我来北京后的第一个完整的项目，参与了从原型到初期开发，到现在的开放邀请，经历了宝贵的从无到有的过程。现在终于推开门，迈出第一步。</p>

<p>产品的详细介绍，请移步我们的<a href="http://readwise.net/blog/12-17-2012/this-is-our-ann.html" target="_blank">产品博客</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heatcanvas is available via bower]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/11/19/heatcanvas-is-available-via-bower/"/>
    <updated>2012-11-19T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/11/19/heatcanvas-is-available-via-bower</id>
    <content type="html"><![CDATA[<p>The heat map toolkit, heatcanvas, is now available via twitter&#8217;s package management tool, bower.</p>

<p>You can now install heatcanvas with a single command:</p>

<p>bower install heatcanvas</p>

<p>Enjoy this library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exaile 豆瓣电台插件 0.0.13]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/11/12/exaile-%E8%B1%86%E7%93%A3%E7%94%B5%E5%8F%B0%E6%8F%92%E4%BB%B6-0-0-13/"/>
    <updated>2012-11-12T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/11/12/exaile-豆瓣电台插件-0-0-13</id>
    <content type="html"><![CDATA[<p>近来工作甚忙，一直没有精力来更新这个插件。加之exaile被archlinux清到了aur仓库，项目的前景亦是堪忧。恰好有两位热心网友@JoveYu和@watermelonlh在github上提出愿意帮助维护这个项目。两位都是很好的贡献者，用了一周左右的时间，居然看遍了我乱糟糟的代码，更看遍了Exaile更乱糟糟的代码。说干就干，还真让这个插件在Exaile 0.3.3健健康康地运行起来。而这段时间我没能给两位什么具体的帮助，着实惭愧。</p>

<p>不管怎样，现在我们又拥有了和原先一模一样的功能：
<img src="http://i.imgur.com/L3oqp.png" alt="" /></p>

<p>你可以在github找到这个项目并下载最新的版本：<br />
https://github.com/sunng87/exaile-doubanfm-plugin</p>

<p>同时，适用于GNOME 3.6的扩展也已经在审核中了，一旦成功，根据gnome-shell据说最新的自动更新功能，已经安装的用户可以直接更新的最新版本。
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding -var-missing to Clojure Namespace]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/10/27/adding-var-missing-to-clojure-namespace/"/>
    <updated>2012-10-27T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/10/27/adding-var-missing-to-clojure-namespace</id>
    <content type="html"><![CDATA[<p><h3>Motivation</h3></p>

<p>I Just need some mechanism like &#8220;methondMissing&#8221; in Ruby. When a nonexistent var is called, the lookup system will try to call a &#8220;-var-missing&#8221; function in the namespace. This function should return a var and clojure compiler assumes this var as the one it was looking for.</p>

<p>For example, in the shake library:<br />
[cc lang=&#8221;clojure&#8221;]<br />
(ns shake.core)</p>

<p>(defn -var-missing [sym]<br />
  (create-executable-var sym))<br />
[/cc]</p>

<p>To support lazy loading, shake 0.3.0 won&#8217;t read your path. It will now create vars on demand. So on calling sh/uname, a var named `uname` will be created. And to create a var, just use intern or eval.</p>

<p>[cc lang=&#8221;clojure&#8221;]<br />
(require &#8216;[shake.core :as sh])<br />
(sh/uname -a)<br />
[/cc]</p>

<p><h3>How to</h3></p>

<p>I&#8217;m sorry there is no way to implement this except hacking into Clojure&#8217;s compiler. Fortunately, it&#8217;s not too difficult to find out the injection point. </p>

<p>As you may know, there are two phases in Clojure compiler: expanding macros and evaluating forms. Both phases will look up vars to find macros or values. So we should take care both of them.</p>

<p>All code diff is here:
<script src="https://gist.github.com/3962750.js?file=Compiler.java"></script></p>

<p><h3>Conclusion</h3>
Adding -var-missing is just an attempt to implement lazy loading of vars. And it provides another smooth syntax for writing DSLs. But actually, Clojure&#8217;s macro system provides a great metaprogramming mechanism. So in most case, you don&#8217;t have to hack into the Compiler like this. Just put your DSL into a top level macro, and you can get them done all in clojure scripts. </p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New shake syntax]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/09/23/new-shake-syntax/"/>
    <updated>2012-09-23T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/09/23/new-shake-syntax</id>
    <content type="html"><![CDATA[<p>As shake goes public, I received a lot of feedback. The top issue is about using clojure variables in shake macros. Now it has been fixed in 0.2.2. Let me show you the new syntax. </p>

<p>Using vars, local bindings in shake macros:<br />
[cc lang=&#8221;clojure&#8221;]<br />
(require &#8216;[shake.core :as sh])</p>

<p>(let [x &#8220;/home/nsun&#8221;]<br />
  (sh/ls -l $x))<br />
[/cc]</p>

<p>So you have to prefix the clojure variable with a dollar sign. This is quite similar to what we did in shell programming.</p>

<p>And more interesting, you can also use a $ prefixed clojure form in shake:</p>

<p>[cc lang=&#8221;clojure&#8221;]<br />
(sh/curl $(format &#8220;https://github.com/%s&#8221; &#8220;sunng87&#8221;))<br />
[/cc]</p>

<p>Thanks to Clojure macro system, it has great flexibility to manipulate symbols and code lists, making inventing new syntax much easier than other languages. Shake can be a great example in describing macro system.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shake: Every Program Can Be a Clojure Function]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/09/21/shake-every-program-can-be-a-clojure-function/"/>
    <updated>2012-09-21T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/09/21/shake-every-program-can-be-a-clojure-function</id>
    <content type="html"><![CDATA[<p>You might have heard of <a href="http://amoffat.github.com/sh/index.html">sh</a>, which brings python an interface to call subprocesses. The API of sh is pretty cool: Every command can be treated as a python function, and imported from a namespace. Options and arguments are passed in as python string.</p>

<p>But I think in Clojure, things can be even cooler. We dynamically create symbols for every program. We will have a beautiful DSL so you don&#8217;t have to quote arguments as string. So when you are using this library, it may look like:</p>

<p>[cc lang=&#8221;clojure&#8221;]<br />
(ls)<br />
(uname -a)<br />
(ip -4 addr)<br />
[/cc]</p>

<p>And actually it&#8217;s just like that! I create this library called <strong><a href="https://github.com/sunng87/shake/" target="_blank">shake</a></strong>. When you load `shake.core`, it indexes all the executables in your path. Then all programs are available to you in a clojure native way.</p>

<p>[cc lang=&#8221;clojure&#8221;]</p>

<p>(use &#8216;shake.core)<br />
(uname -a) ;; returns a java.lang.Process, that you can send data, read data and wait for termination.</p>

<p>;; for those just need output<br />
(alter-var-root *print-outpt* (fn [_] true))<br />
(uname -a)<br />
;; it prints &#8230;<br />
[/cc]</p>

<p>There&#8217;s a lot of fun in implementing this library. First, to be able to use custom symbol in the DSL, you have to make these executables as macros. Second, find a way to programmably create vars which are named by string. The power of Clojure enables all the ideas and makes it possible. Check out the source code if you are interested in: <a href="https://github.com/sunng87/shake/">https://github.com/sunng87/shake/</a>. </p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cljts: Java Topology Suite for Clojure]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/09/15/cljts-java-topology-suite-for-clojure/"/>
    <updated>2012-09-15T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/09/15/cljts-java-topology-suite-for-clojure</id>
    <content type="html"><![CDATA[<p>I almost forgot to announce this library I made half of a year ago. This library is aiming to bring Clojure to GIS. So you can manipulate geometry objects with a set of clojure functions.</p>

<p>The library covers :
<ul>
	<li>Geometries defined in Simple Feature Spec</li>
	<li>Spatial relationship test, based on DE-9IM.</li>
	<li>IO functions, WKT and WKB support</li>
	<li>some spatial analysis functions such as buffer, convex-hull</li>
</ul></p>

<p>Also, this week Alexey Pushkin sent pull request and added support for Perpared Geometry and Affine transformations.</p>

<p>The current release of cljts is 0.2.0-SNAPSHOT. You can find API document at <a href="http://sunng87.github.com/cljts/">here</a>. </p>

<p>If you are also interested in bringing clojure to GIS, feel free to get connected and hope I could help you.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[丰宁草原]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/09/09/%E4%B8%B0%E5%AE%81%E8%8D%89%E5%8E%9F/"/>
    <updated>2012-09-09T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/09/09/丰宁草原</id>
    <content type="html"><![CDATA[<p>来了北京以后一直没有停止到处游走的脚步，这周末去了丰宁的坝上草原。第一回去草原，第一回骑马，第一回看日出。</p>

<p>丰宁在承德市，我们去的地方叫大滩镇，在丰宁县的北部。晚上九点从北京出发，达到大滩的农家院已经是半夜两点了。农家院的住宿条件还不错。当天天气晴朗，晚上抬头能看到多年未见漫天星辰。本来约好当天去看日出，谁知睁开眼的时候屋里都满是阳光了。上午就直接骑马去草原：村里的旅游经济搞得红火，有开旅店的，有养马领路的。</p>

<p>第一回骑马，或者说第一回和个动物挨这么近。前半程紧张的够呛，坐在马上浑身紧着，都不知道哪用力（或者说全身都在使劲）。骑着骑着渐渐放松，知道用腿加紧马，手拽着缰绳。我把马的速度戏分为三档：一档起步，踱步子；二档小跑，颠着；三档叫奔，后腿蹬起来，骑着有种要飞的感觉（或者说要摔下来的感觉）。这里二档是最难受的，颠得屁股生疼，五脏六腑都快倒出来。开始的时候没觉得累，反倒是休息了一下，开始背疼腰疼腿疼，等到第二天早晨居然就真的弯不下腰了。不过侧面倒是说明，别看这好像是坐在马上，全身肌肉到是没闲着。腰背这部分常年没练，疼点也正常。再说马，马是个随大流的动物，跑不跑全看他认识的这一伙马跑不跑。他要是不想动，再怎么蹬也没有用。当然这马也能被理解，就像那句“一定有一些马，想回到古代”。</p>

<p>第二天早上终于坚定地看到了日出。在满天月亮金星木星的时辰披上长袖出门，看着背后的天色，一路走走跑跑生怕阳光不等看日出的人就位就露出来。坐到山坡上，等天边的第一缕阳光的心情，是美好的。不过更美好的是等到阳光普照后，你踱着步子从山上下来，穿过牛群马群羊群庄稼蔬菜，再被马群穿过。拖上长长的影子，一路鸡鸣犬吠马啸牛叫，往粉雾里的村庄走。</p>

<p>上午去的闪电湖，是草原上一个水坝成湖。有水的地方能有灵性，至少在干燥的地方，一片湖泊让人精神放松，有工夫想点有灵性的事。远处的大坝分隔，这水天相接，像一面镜子一样，互相照着。我在这打破了自己上个月的北纬的纪录，41.656度。</p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962669566/" title="DSC_0077 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8319/7962669566_26b6dcf278.jpg" width="500" height="336" alt="DSC_0077" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962670216/" title="DSC_0134 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8458/7962670216_6a0676ee75.jpg" width="500" height="336" alt="DSC_0134" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962670708/" title="DSC_0146 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8171/7962670708_664b68b9e8.jpg" width="500" height="336" alt="DSC_0146" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962671048/" title="DSC_0161 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8299/7962671048_6944da4427.jpg" width="500" height="336" alt="DSC_0161" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962671382/" title="DSC_0165 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8300/7962671382_ed75b437cc.jpg" width="500" height="336" alt="DSC_0165" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962671604/" title="DSC_0170 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8442/7962671604_4994affce5.jpg" width="500" height="336" alt="DSC_0170" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962672440/" title="DSC_0176 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8171/7962672440_1ebbb21ca0.jpg" width="500" height="336" alt="DSC_0176" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962672702/" title="DSC_0185 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8173/7962672702_be01baf8a8.jpg" width="500" height="336" alt="DSC_0185" /></a></p>

<p><a href="http://www.flickr.com/photos/40741608@N08/7962673572/" title="DSC_0209 by 贝小塔, on Flickr"><img src="http://farm9.staticflickr.com/8311/7962673572_efcc4fc722.jpg" width="500" height="336" alt="DSC_0209" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[京张铁路]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/08/19/%E4%BA%AC%E5%BC%A0%E9%93%81%E8%B7%AF/"/>
    <updated>2012-08-19T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/08/19/京张铁路</id>
    <content type="html"><![CDATA[<p>这两周体验了一下北京周边的铁路。上周从北京西到张家口，这周从北京北到延庆。</p>

<p>用倒叙的方式说，我们常说的京张铁路是詹天佑修的那条百年历史的路线。这条路从现在的眼光看，南起西直门的北京北站，经过八达岭，康庄跨过官厅水库到河北沙城，进而宣化，张家口。不过这个路线现在已经少有车走了（查到一条L295次，但不确定具体路线）。从北京北开到延庆的S2动车是现在这条路线上主角。这是一趟郊区线，准确地说是旅游列车，为了解决从北京市区到八达岭交通压力大的问题。所有的车厢一律是动车一等座，从北京北到八达岭只要5元，可以说是物美价廉。一直到八达岭之前，路线都是老的京张铁路，在青龙桥依然还有著名的”人字形“铁路。作为旅游列车的话还真是个保留节目。</p>

<p>这次车在康庄附近离开京张线，进入康延线，一直开到延庆站，铁路就到了尽头。目前延庆车站也只有往返这个区间的S2线。另外据说延庆还有一个火车北站，是大秦线的一座货运车站，没有客运业务。</p>

<p>再说上周去张家口。现在北京去张家口的主要列车都从丰沙线走，经过丰台，石景山南，三家店进入京西的山区，最后在沙城和老的京张铁路汇合。在车上听人介绍，这段铁路1954年修成。出京经过62个隧道，进京65个。这些隧道全部分布在丰沙线上，据说是这条线是詹天佑最初选定路线，但是因为成本较高只能选了八达岭方向。我乘4447次从北京西出发，进入这段之后风景秀丽，有山有水（官厅水库），打开车窗清风拂面，实在是坐火车的最佳体验。</p>

<p>最后，张家口现在有两个车站。南站位于京包线上，几乎所有经过到达张家口的车都在这里停，是目前主要的车站。它门前是詹天佑的铜像。另一个张家口站是真正的京张铁路终点，也是百年历史，深入张家口市区，现在只有终到张家口的少数几次车。他的样式和我印象里的南京西站几乎一样，地位似乎也和西站类似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top Github users in China]]></title>
    <link href="http://sunng87.github.io/blog//blog/2012/07/19/top-github-users-in-china/"/>
    <updated>2012-07-19T00:00:00+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2012/07/19/top-github-users-in-china</id>
    <content type="html"><![CDATA[<p>有感于<a href="http://sofish.de/file/demo/github/" target="_blank">这个版本</a>的github中国用户排名，我觉得单纯根据用户的followers数量不能完全说明问题。因此，需要改进一下排名的分数，加入项目Watchers的数量，这样可以让优质项目多的用户排名到前面。</p>

<p>这个策略是：followers + 1.5 * watchers + 2 * forks</p>

<p>得到的排名如下：
<script src="https://gist.github.com/3141146.js?file=results"></script></p>

<p>另外，这前100名用户里，语言使用的情况如下：<br />
&#8216;JavaScript&#8217;: 80<br />
&#8216;Ruby&#8217;: 52<br />
&#8216;Python&#8217;: 46<br />
&#8216;C&#8217;: 34<br />
&#8216;C++&#8217;: 30<br />
&#8216;Java&#8217;: 28<br />
&#8216;VimL&#8217;: 28<br />
&#8216;Shell&#8217;: 24<br />
&#8216;Objective-C&#8217;: 24<br />
&#8216;PHP&#8217;: 21<br />
&#8216;CoffeeScript&#8217;: 13<br />
&#8216;Perl&#8217;: 10<br />
&#8216;Erlang&#8217;: 9<br />
&#8216;Emacs Lisp&#8217;: 9<br />
&#8216;Lua&#8217;: 6<br />
&#8216;Haskell&#8217;: 5<br />
&#8216;Clojure&#8217;: 5<br />
&#8216;Go&#8217;: 5<br />
&#8216;ActionScript&#8217;: 4<br />
&#8216;C#&#8217;: 3<br />
&#8216;Scheme&#8217;: 2<br />
&#8216;Common Lisp&#8217;: 2<br />
&#8216;Elixir&#8217;: 2<br />
&#8216;Scala&#8217;: 1<br />
&#8216;Objective-J&#8217;: 1<br />
&#8216;Vala&#8217;: 1<br />
&#8216;Nemerle&#8217;: 1</p>

<p>明天我会补充一下城市的排名。</p>

<p></p>
]]></content>
  </entry>
  
</feed>
