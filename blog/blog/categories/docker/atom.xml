<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Here comes the Sun]]></title>
  <link href="http://sunng87.github.io/blog//blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://sunng87.github.io/blog//"/>
  <updated>2014-08-02T19:45:23+08:00</updated>
  <id>http://sunng87.github.io/blog//</id>
  <author>
    <name><![CDATA[Sun Ning]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Docker 中安装和使用 Rust Nightly 版本]]></title>
    <link href="http://sunng87.github.io/blog//blog/2014/08/02/rust-with-docker/"/>
    <updated>2014-08-02T18:02:12+08:00</updated>
    <id>http://sunng87.github.io/blog//blog/2014/08/02/rust-with-docker</id>
    <content type="html"><![CDATA[<p>一直关注 Rust 语言，最近一下发现了两个 web 框架，<a href="http://ironframework.org">Iron</a> 和 <a href="http://nickel.rs">Nickel.rs</a>。先不说这两个框架成熟度如何，一般情况下，一个语言有了 web 框架，算是一个里程碑，说明他离靠谱也不远了。这样我决定跟一下 nightly 版本（新框架都是跟 nightly），另外也能感受一下 <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009090.html">Yehuda Katz 的构建工具 Cargo</a>。ArchLinux 的仓库里已经有 0.11 版本，再用脚本安装必然会有冲突。于是想到了最近半年<a href="https://twitter.com/jessenoller/status/495037475421954048">最火的 Docker</a>，可以轻松的创建多个环境，正是一个非常好的场景。</p>

<h2>安装</h2>

<p>安装 Docker, Arch Linux 仓库里很早就有，非常方便：<code>sudo pacman -S docker</code>。完成之后启动他：<code>sudo systemctl start docker</code>。</p>

<p>之后我们拉一个 ubuntu 的镜像下来：<code>docker pull ubuntu</code>。</p>

<p>完成之后，我们启动一个 container，做一些基本的 setup：<code>docker run -i -t ubuntu:14.04 /bin/bash</code></p>

<p>这相当与运行在 ubuntu:14.04 这个镜像上运行一个 shell，接下来就进入了这个 shell 环境，和 ubuntu 安装版本完全一致，我们做一些基础的准备，安装一些必要的工具：<code>apt-get install build-essentials git curl libssl-dev</code></p>

<p>之后，就可以下载 Rust 提供的脚本来安装 nightly 版本了：<code>curl -s http://www.rust-lang.org/rustup.sh &gt; rustup</code></p>

<p>这里有个问题，rustup 脚本判断64位系统时会出错导致安装失败：
```sh</p>

<h1>Detect 64 bit linux systems with 32 bit userland and force 32 bit compilation</h1>

<p>if [ $CFG_OSTYPE = unknown-linux-gnu -a $CFG_CPUTYPE = x86_64 ]
then</p>

<pre><code>file -L "$SHELL" | grep -q "x86[_-]64"
if [ $? != 0 ]; then
    CFG_CPUTYPE=i686
fi
</code></pre>

<p>fi
```</p>

<p>因为在我的机器上已知系统是64位，就强行绕过了他的判断。</p>

<p>```bash
if [ $CFG_OSTYPE = unknown-linux-gnu -a $CFG_CPUTYPE = x86_64 ]
then</p>

<pre><code>file -L "$SHELL" | grep -q "x86[_-]64"
if [ $? == 0 ]; then
    CFG_CPUTYPE=i686
fi
</code></pre>

<p>fi
```</p>

<p>之后执行 rustup 就可以直接安装最近的 rustc 和 cargo 了。安装完成执行 <code>rustc -v</code> 和 <code>cargo --version</code> （两个工具还不统一！）可以了解安装情况。</p>

<p>exit 退出 shell，commit 你的镜像，这样一个干净的镜像要好好保存：<code>docker commit IMAGE_ID sunng/rust-nightly</code></p>

<h2>Hello World</h2>

<p>之后可以写点代码了，我们不在 docker 里写，我们在 host 机器上写，然后挂载到 docker 上，因此 emacs 什么的也不用配置了。</p>

<p>创建一个目录，比如在 <code>$HOME/var/docker/helloworld</code>下，最简单的 rust 项目只要两个文件： <code>Cargo.toml</code> 和 <code>src/main.rs</code>。</p>

<p>```</p>

<h1>Cargo.toml</h1>

<p>[package]</p>

<p>name = &ldquo;hello-world&rdquo;
version = &ldquo;0.1.0&rdquo;
authors = [ &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#115;&#x75;&#x6e;&#x6e;&#103;&#64;&#97;&#98;&#x6f;&#117;&#116;&#x2e;&#109;&#x65;">&#x73;&#x75;&#x6e;&#110;&#x67;&#x40;&#x61;&#98;&#111;&#x75;&#116;&#46;&#x6d;&#101;</a>&rdquo; ]
```</p>

<p>```rust
//main.rs</p>

<p>fn main() {
  println!(&ldquo;hello world&rdquo;);
}</p>

<p>```</p>

<p>构建项目不需要手动 rustc 了，那是上个世纪的东西，我们直接 <code>cargo build</code> 就可以：<code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly cargo build</code></p>

<p>其中 <code>-v</code> 参数用于挂载目录，<code>-w</code> 参数指定执行的 pwd。</p>

<p>如果构建成功，就可以执行了，在 docker 中执行：<code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly target/hello-world</code></p>

<p>其实可以直接在 host 系统里执行也是完全可以的：<code>$HOME/var/docker/helloworld/target/hello-world</code>。</p>

<h2>Web Hello World</h2>

<p>前面说了 Rust 都有 web 框架了，我们就写一个 Web 版本的 Hello World 吧。这次用 Iron 框架，首先添加依赖到 Cargo 文件：</p>

<p>```
[package]</p>

<p>name = &ldquo;hello-world&rdquo;
version = &ldquo;0.1.0&rdquo;
authors = [ &ldquo;<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x73;&#117;&#110;&#x6e;&#x67;&#x40;&#97;&#x62;&#x6f;&#x75;&#116;&#x2e;&#109;&#101;">&#115;&#117;&#x6e;&#110;&#103;&#64;&#x61;&#x62;&#x6f;&#x75;&#x74;&#x2e;&#109;&#101;</a>&rdquo; ]</p>

<p>[dependencies.iron]</p>

<p>git = &ldquo;<a href="https://github.com/iron/iron.git">https://github.com/iron/iron.git</a>&rdquo;</p>

<p>[dependencies.core]</p>

<p>git = &ldquo;<a href="https://github.com/iron/core.git">https://github.com/iron/core.git</a>&rdquo;
```</p>

<p>Cargo 目前还没有中央仓库，但是<a href="http://crates.io/faq.html#github">据说将来会有</a>。目前还都是用 git 仓库来直接添加，所以构建环境里必须要有 git。</p>

<p>照着 <a href="https://github.com/iron/iron/blob/master/examples/hello.rs">Iron 的例子</a>写一个最简单的 hello world 程序。</p>

<p>```rust
extern crate iron;
extern crate http;</p>

<p>use std::io::net::ip::Ipv4Addr;
use iron::{Iron, Server, Chain, Request, Response, Alloy, Status, Unwind, FromFn};
use <a href="http::status;">http::status;</a></p>

<p>fn hello_world(<em>: &amp;mut Request, res: &amp;mut Response, </em>: &amp;mut Alloy) &ndash;> Status {</p>

<pre><code>res.serve(status::Ok, "Hello, world!");
Unwind
</code></pre>

<p>}</p>

<p>fn main() {
  let mut server: Server = Iron::new();
  server.chain.link(FromFn::new(hello_world));
  server.listen(Ipv4Addr(127, 0, 0, 1), 3000);
}</p>

<p>```</p>

<p>编译 <code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld sunng/nightly cargo build</code></p>

<p>运行 <code>docker run -i -t -v $HOME/var/docker:/mnt/data -w /mnt/data/helloworld -p 3000:3000 sunng/nightly target/hello-world</code></p>

<p>新增的参数<code>-p</code>是把 docker 环境里的端口3000映射到 host 上的3000，这样我们才能在外面访问。</p>

<p>最后还有一个问题，因为程序听的是127.0.0.1，所以在 host 上是无法访问这个端口的，修改代码：</p>

<p>```rust</p>

<p>  server.listen(Ipv4Addr(0, 0, 0, 0), 3000);
```</p>

<p>就可以正常工作了。</p>

<h2>Wrap up</h2>

<p>总结一下上面用 docker 比虚拟机的好处：</p>

<ul>
<li>占用资源少，启动快</li>
<li>与 host 共享网络、硬盘都非常方便，满足开发需要不成问题</li>
<li>所有都是命令，与 host 系统上的进程集成也非常方便</li>
<li>支持镜像的版本控制和仓库</li>
</ul>

]]></content>
  </entry>
  
</feed>
