<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here comes the Sun</title>
  <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/"/>
  <link rel="self" type="application/atom+xml" href="http://sunng87.github.io/blog/blog/blog/categories/ann/atom.xml"/>
  <id>http://sunng87.github.io/blog/blog/</id>
  <updated>2013-04-24T00:00:00+08:00</updated>
  <generator uri="http://octopress.org/">Octopress</generator>
  
  <rights>Copyright Â© 2015, Sun Ning</rights>

  <entry>
    <title type="html">Checkout Ring Adapter for Jetty 9</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2013/04/24/checkout-ring-adapter-for-jetty-9/"/>
    
    <id>/blog/2013/04/24/checkout-ring-adapter-for-jetty-9</id>
    <published>2013-04-24T00:00:00+08:00</published>
    <updated>2013-04-24T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>The Clojure world has been using Jetty 7 for quite a long time because it's supported by the Ring development team. However, Jetty 9 brings us exciting features like WebSocket and SPDY. In order to use websocket in my Clojure web application, I built this adapter last weekend.</p>

<p>[info.sunng/ring-jetty9-adapter "0.1.0"]</p>

<p>The API for Clojure is still consistent with the one for jetty 7.<br />
[cc lang="clojure"]<br />
(use 'ring.adapter.jetty9)<br />
(run-jetty app {})<br />
[/cc]</p>

<p>Options supported in jetty 9 are almost same as jetty 7 except the configurator is dropped. And a new "WebSockets" option is added. Accepting a map of context path and websocket class, it enables websocket protocol in your web application.</p>

<p>[cc lang="clojure"]<br />
(use 'ring.adapter.jetty9)<br />
(run-jetty app {:websockets {"/loc" LocationTracker}})<br />
[/cc]</p>

<p>Due to the lack of WebSocket API standards, I don't spend time on the WebSocket abstraction. Just use Jetty's internal API for websocket. Here is a typical implementation of websocket listener.<br />
<figure class='code-highlight-figure'><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="c1">;; sample code</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">(</span><span class="nf">ns</span><span class="w"> </span><span class="n">xxx.ws.location</span><span class="w">
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="no">:gen-class</span><span class="w">
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:name</span><span class="w"> </span><span class="n">xxx.LocationTracker</span><span class="w">
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:init</span><span class="w"> </span><span class="n">init</span><span class="w">
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:state</span><span class="w"> </span><span class="n">state</span><span class="w">
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:extends</span><span class="w"> </span><span class="n">org.eclipse.jetty.websocket.api.WebSocketAdapter</span><span class="w">
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:prefix</span><span class="w"> </span><span class="n">ws-</span><span class="w">
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'>   </span><span class="no">:exposes-methods</span><span class="w"> </span><span class="p">&#x7b;</span><span class="n">onWebSocketConnect</span><span class="w"> </span><span class="n">superOnWebSocketConnect</span><span class="p">&#x7d;)</span><span class="w">
</div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="no">:require</span><span class="w"> </span><span class="p">[</span><span class="n">clojure.data.json</span><span class="w"> </span><span class="no">:as</span><span class="w"> </span><span class="n">json</span><span class="p">]</span><span class="w">
</div></div><div data-line='11' class='code-highlight-row numbered'><div class='code-highlight-line'>            </span><span class="p">[</span><span class="n">clojure.tools.logging</span><span class="w"> </span><span class="no">:as</span><span class="w"> </span><span class="n">logging</span><span class="p">]</span><span class="w">
</div></div><div data-line='12' class='code-highlight-row numbered'><div class='code-highlight-line'>            </span><span class="p">[</span><span class="n">monger.collection</span><span class="w"> </span><span class="no">:as</span><span class="w"> </span><span class="n">mc</span><span class="p">])</span><span class="w">
</div></div><div data-line='13' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="no">:import</span><span class="w"> </span><span class="p">(</span><span class="nf">org.eclipse.jetty.websocket.api</span><span class="w"> </span><span class="n">WebSocketAdapter</span><span class="p">)</span><span class="w">
</div></div><div data-line='14' class='code-highlight-row numbered'><div class='code-highlight-line'>           </span><span class="p">(</span><span class="nf">java.util</span><span class="w"> </span><span class="n">UUID</span><span class="p">)))</span><span class="w">
</div></div><div data-line='15' class='code-highlight-row numbered'><div class='code-highlight-line'></span>
</div></div><div data-line='16' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">ws-init</span><span class="w"> </span><span class="p">[]</span><span class="w">
</div></div><div data-line='17' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">[[]</span><span class="w"> </span><span class="p">&#x7b;</span><span class="no">:client-id</span><span class="w"> </span><span class="p">(</span><span class="nb">str</span><span class="w"> </span><span class="p">(</span><span class="nf">UUID/randomUUID</span><span class="p">))&#x7d;])</span><span class="w">
</div></div><div data-line='18' class='code-highlight-row numbered'><div class='code-highlight-line'></span>
</div></div><div data-line='19' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">ws-onWebSocketConnect</span><span class="w"> </span><span class="p">[</span><span class="n">this</span><span class="w"> </span><span class="n">session</span><span class="p">]</span><span class="w">
</div></div><div data-line='20' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="nf">.superOnWebSocketConnect</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w">
</div></div><div data-line='21' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="nf">logging/warn</span><span class="w"> </span><span class="s">"new connection: "</span><span class="w"> </span><span class="p">(</span><span class="nf">get-client-id</span><span class="w"> </span><span class="n">this</span><span class="p">))</span><span class="w">
</div></div><div data-line='22' class='code-highlight-row numbered'><div class='code-highlight-line'></span>
</div></div><div data-line='23' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">ws-onWebSocketText</span><span class="w"> </span><span class="p">[</span><span class="n">this</span><span class="w"> </span><span class="n">message</span><span class="p">]</span><span class="w">
</div></div><div data-line='24' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="k">let</span><span class="w"> </span><span class="p">[</span><span class="n">msg</span><span class="w"> </span><span class="p">(</span><span class="nf">json/read-json</span><span class="w"> </span><span class="n">message</span><span class="p">)]</span><span class="w">
</div></div><div data-line='25' class='code-highlight-row numbered'><div class='code-highlight-line'>    </span><span class="p">(</span><span class="nf">case</span><span class="w"> </span><span class="p">(</span><span class="no">:type</span><span class="w"> </span><span class="n">msg</span><span class="p">)</span><span class="w">
</div></div><div data-line='26' class='code-highlight-row numbered'><div class='code-highlight-line'>      </span><span class="n">...</span><span class="p">)))</span><span class="w">
</div></div><div data-line='27' class='code-highlight-row numbered'><div class='code-highlight-line'></span>
</div></div><div data-line='28' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">ws-onWebSocketClose</span><span class="w"> </span><span class="p">[</span><span class="n">this</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="n">reason</span><span class="p">]</span><span class="w">
</div></div><div data-line='29' class='code-highlight-row numbered'><div class='code-highlight-line'>  </span><span class="p">(</span><span class="nf">logging/debug</span><span class="w"> </span><span class="s">"close socket"</span><span class="p">))</span></div></div></pre></div></figure>


<p>Since Jetty will create new instance of adapter for each connection, it requires heavy usage of "gen-class" . Remember to add the namespace to AOT compilation. Detailed Jetty API spec can be found <a href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/websocket/api/WebSocketAdapter.html" target="_blank">here</a>.<br />
 
And also find the project is <a href="https://github.com/sunng87/ring-jetty9-adapter" target="_blank">here</a>.</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">[ANN] Handlebars Clojure API</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2013/04/12/ann-handlebars-clojure-api/"/>
    
    <id>/blog/2013/04/12/ann-handlebars-clojure-api</id>
    <published>2013-04-12T00:00:00+08:00</published>
    <updated>2013-04-12T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>The ONLY real-world modern clojure templating system. <br />
I just can't believe that the clojure world doesn't build web application with server-side template.<br />
hiccup and enlive are neither **real-world**. So people tends to use single page architecture for a clojure backend. That's PAINFUL.</p>

<p>Available on clojars [hbs "0.4.1"], code and docs on <a href="https://github.com/readwise/hbs" target="_blank">github</a>. We have been using hbs on <a href="http://readwise.net" target="_blank">readwise.net</a> for a long time.</p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">ANN ç¾å³ç±è¯» readwise.net</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/12/05/ann%E7%BE%8E%E5%91%B3%E7%88%B1%E8%AF%BB-readwise-net/"/>
    
    <id>/blog/2012/12/05/annç¾å³ç±è¯»-readwise-net</id>
    <published>2012-12-05T00:00:00+08:00</published>
    <updated>2012-12-05T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>è¯æ¶è¯æå°ï¼ä½æ¯è¿æ¯å¾æè¿çèæ§åºæ¥ç»å¤§å®¶å°å°ã</p>

<p>æä»¬çæ°äº§åï¼<a href="http://readwise.net/" target="_blank">ç¾å³ç±è¯»(ReadWise)</a>ç°å¨æ­£å¼å¼æ¾å¸å·ç³è¯·äºã</p>

<p>ä»åªéè¯´èµ·å¢ï¼ç¾å³ä¹¦ç­¾ï¼åæ¬æ´ä¸ªAVOSé½å¨åä¿¡æ¯æåç¸å³çäºèç½äº§åï¼ç¾å³ç±è¯»ä¾ç¶å»¶ç»­çè¿ä¸ªè·¯çº¿ãç¾å³ç±è¯»æ¯ä¸ä¸ªéè¯»äº§åï¼ä¸è¿ä¸å¸é¢ä¸å¶ä»çç±»ä¼¼äº§åç¸æ¯ï¼æä»¬æç¹ä¸åã</p>

<p>é¦åï¼æä»¬éè¿ææ¯ææ®µï¼ç»æ¯å¤©æåå°çRSSæç« æä¸ç²åº¦æç»çæ ç­¾ï¼å°±åDeliciousé£æ ·çtagï¼ï¼åå°ç½ç«æ¶ï¼æ¨å¯ä»¥éæ©èªå·±æå´è¶£çå ä¸ªæ ç­¾ï¼ä»èè·å¾ç¸å³çæ°æç« ã
<img src="http://i.imgur.com/UsPfE.png" alt="" /></p>

<p>å¶äºï¼æä»¬ä¼è·è¸ªæç« å¨äºèç½ä¸çä¼ æ­æåµï¼å¨å¾®ååtwitterä¸çå¼ç¨æ¬¡æ°ï¼åæ­¤æ¥å¤æ­å®çä»·å¼ï¼å½±åå®å¨éè¯»å¨éçä½ç½®ãæä»¬è¿ä¼ä»è¿äºç½ç«æåç¨æ·çè¯è®ºï¼ççå«äººå¦ä½è¯´ã
<img src="http://i.imgur.com/Qxncb.png" alt="" /></p>

<p>ç±äºæ¶é´åèµæºæéï¼åææä»¬è¿åªæææ¯åç§æç¸å³çåå®¹ãå¶ä¸­æå¾å¤è±æï¼æçç¨æ·å¯è½ä¼å¯¹æ­¤å­å¨çé®ãèèè¿ä¸ªé¢åæçç¹æ®æ§ï¼ä¸ºäºä¿è¯ä¿¡æ¯çè´¨éï¼æä»¬æåè¿æ¯å³å®ä¸åé¿è¿äºè±æåå®¹ãè¿ææä¹æ¯å¼äºåæ²³ï¼æ¢ç¶è¦ä¸åï¼é£å°±è¦ä¸åå°å½»åºãå½ç¶å¾å¿«éçé¢åçæ©å¤§ï¼åå®¹çå¢å ï¼é«è´¨éçä¸­ææç« è¯å®ä¼è¶æ¥è¶å¤ã
<img src="http://i.imgur.com/A3t71.png" alt="" /></p>

<p>æä»¬éç¨çresponsive UIå¯ä»¥å¨åç§åè¾¨ççå±å¹ä¸å·¥ä½ï¼æä»¥AndroidçChromeåiPhoneçæµè§å¨ä¹å¯ä»¥ç´æ¥è®¿é®ï¼ä¸ç¨æå¿ã
<img src="http://i.imgur.com/WexJU.png" alt="" /></p>

<p>æåï¼å¨éè¯»çUIä¸ï¼å¯ä»¥ç¨é®çJ/Kæ¥çæç« ï¼Oæå¼é¾æ¥ï¼Mæ è®°æ¶èãä¹æä»¥å¼ºè°ä¸ä¸ï¼æ¯å ä¸ºè¿æ¯ä¸ä¸ªå·¥ç¨å¸é©±å¨çäº§åï¼è¿æ ·çå°åè½æ¯å¿å¤çã</p>

<p>è¿æ¯ææ¥åäº¬åçç¬¬ä¸ä¸ªå®æ´çé¡¹ç®ï¼åä¸äºä»ååå°åæå¼åï¼å°ç°å¨çå¼æ¾éè¯·ï¼ç»åäºå®è´µçä»æ å°æçè¿ç¨ãç°å¨ç»äºæ¨å¼é¨ï¼è¿åºç¬¬ä¸æ­¥ã</p>

<p>äº§åçè¯¦ç»ä»ç»ï¼è¯·ç§»æ­¥æä»¬ç<a href="http://readwise.net/blog/12-17-2012/this-is-our-ann.html" target="_blank">äº§ååå®¢</a>ã</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Heatcanvas Is Available via Bower</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/11/19/heatcanvas-is-available-via-bower/"/>
    
    <id>/blog/2012/11/19/heatcanvas-is-available-via-bower</id>
    <published>2012-11-19T00:00:00+08:00</published>
    <updated>2012-11-19T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>The heat map toolkit, heatcanvas, is now available via twitter's package management tool, bower.</p>

<p>You can now install heatcanvas with a single command:</p>

<p>bower install heatcanvas</p>

<p>Enjoy this library.</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Exaile è±ç£çµå°æä»¶ 0.0.13</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/11/12/exaile-%E8%B1%86%E7%93%A3%E7%94%B5%E5%8F%B0%E6%8F%92%E4%BB%B6-0-0-13/"/>
    
    <id>/blog/2012/11/12/exaile-è±ç£çµå°æä»¶-0-0-13</id>
    <published>2012-11-12T00:00:00+08:00</published>
    <updated>2012-11-12T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>è¿æ¥å·¥ä½çå¿ï¼ä¸ç´æ²¡æç²¾åæ¥æ´æ°è¿ä¸ªæä»¶ãå ä¹exaileè¢«archlinuxæ¸å°äºaurä»åºï¼é¡¹ç®çåæ¯äº¦æ¯å ªå¿§ãæ°å¥½æä¸¤ä½ç­å¿ç½å@JoveYuå@watermelonlhå¨githubä¸æåºæ¿æå¸®å©ç»´æ¤è¿ä¸ªé¡¹ç®ãä¸¤ä½é½æ¯å¾å¥½çè´¡ç®èï¼ç¨äºä¸å¨å·¦å³çæ¶é´ï¼å±ç¶çéäºæä¹±ç³ç³çä»£ç ï¼æ´çéäºExaileæ´ä¹±ç³ç³çä»£ç ãè¯´å¹²å°±å¹²ï¼è¿çè®©è¿ä¸ªæä»¶å¨Exaile 0.3.3å¥å¥åº·åº·å°è¿è¡èµ·æ¥ãèè¿æ®µæ¶é´ææ²¡è½ç»ä¸¤ä½ä»ä¹å·ä½çå¸®å©ï¼çå®æ­æ§ã</p>

<p>ä¸ç®¡ææ ·ï¼ç°å¨æä»¬åæ¥æäºåååä¸æ¨¡ä¸æ ·çåè½ï¼
<img src="http://i.imgur.com/L3oqp.png" alt="" /></p>

<p>ä½ å¯ä»¥å¨githubæ¾å°è¿ä¸ªé¡¹ç®å¹¶ä¸è½½ææ°ççæ¬ï¼<br />
https://github.com/sunng87/exaile-doubanfm-plugin</p>

<p>åæ¶ï¼éç¨äºGNOME 3.6çæ©å±ä¹å·²ç»å¨å®¡æ ¸ä¸­äºï¼ä¸æ¦æåï¼æ ¹æ®gnome-shellæ®è¯´ææ°çèªå¨æ´æ°åè½ï¼å·²ç»å®è£çç¨æ·å¯ä»¥ç´æ¥æ´æ°çææ°çæ¬ã
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">New Shake Syntax</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/09/23/new-shake-syntax/"/>
    
    <id>/blog/2012/09/23/new-shake-syntax</id>
    <published>2012-09-23T00:00:00+08:00</published>
    <updated>2012-09-23T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>As shake goes public, I received a lot of feedback. The top issue is about using clojure variables in shake macros. Now it has been fixed in 0.2.2. Let me show you the new syntax. </p>

<p>Using vars, local bindings in shake macros:<br />
[cc lang="clojure"]<br />
(require '[shake.core :as sh])</p>

<p>(let [x "/home/nsun"]<br />
  (sh/ls -l $x))<br />
[/cc]</p>

<p>So you have to prefix the clojure variable with a dollar sign. This is quite similar to what we did in shell programming.</p>

<p>And more interesting, you can also use a $ prefixed clojure form in shake:</p>

<p>[cc lang="clojure"]<br />
(sh/curl $(format "https://github.com/%s" "sunng87"))<br />
[/cc]</p>

<p>Thanks to Clojure macro system, it has great flexibility to manipulate symbols and code lists, making inventing new syntax much easier than other languages. Shake can be a great example in describing macro system.
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Shake: Every Program Can Be a Clojure Function</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/09/21/shake-every-program-can-be-a-clojure-function/"/>
    
    <id>/blog/2012/09/21/shake-every-program-can-be-a-clojure-function</id>
    <published>2012-09-21T00:00:00+08:00</published>
    <updated>2012-09-21T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>You might have heard of <a href="http://amoffat.github.com/sh/index.html">sh</a>, which brings python an interface to call subprocesses. The API of sh is pretty cool: Every command can be treated as a python function, and imported from a namespace. Options and arguments are passed in as python string.</p>

<p>But I think in Clojure, things can be even cooler. We dynamically create symbols for every program. We will have a beautiful DSL so you don't have to quote arguments as string. So when you are using this library, it may look like:</p>

<p>[cc lang="clojure"]<br />
(ls)<br />
(uname -a)<br />
(ip -4 addr)<br />
[/cc]</p>

<p>And actually it's just like that! I create this library called <strong><a href="https://github.com/sunng87/shake/" target="_blank">shake</a></strong>. When you load `shake.core`, it indexes all the executables in your path. Then all programs are available to you in a clojure native way.</p>

<p>[cc lang="clojure"]</p>

<p>(use 'shake.core)<br />
(uname -a) ;; returns a java.lang.Process, that you can send data, read data and wait for termination.</p>

<p>;; for those just need output<br />
(alter-var-root *print-outpt* (fn [_] true))<br />
(uname -a)<br />
;; it prints ...<br />
[/cc]</p>

<p>There's a lot of fun in implementing this library. First, to be able to use custom symbol in the DSL, you have to make these executables as macros. Second, find a way to programmably create vars which are named by string. The power of Clojure enables all the ideas and makes it possible. Check out the source code if you are interested in: <a href="https://github.com/sunng87/shake/">https://github.com/sunng87/shake/</a>. </p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Cljts: Java Topology Suite for Clojure</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/09/15/cljts-java-topology-suite-for-clojure/"/>
    
    <id>/blog/2012/09/15/cljts-java-topology-suite-for-clojure</id>
    <published>2012-09-15T00:00:00+08:00</published>
    <updated>2012-09-15T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>I almost forgot to announce this library I made half of a year ago. This library is aiming to bring Clojure to GIS. So you can manipulate geometry objects with a set of clojure functions.</p>

<p>The library covers :
<ul>
	<li>Geometries defined in Simple Feature Spec</li>
	<li>Spatial relationship test, based on DE-9IM.</li>
	<li>IO functions, WKT and WKB support</li>
	<li>some spatial analysis functions such as buffer, convex-hull</li>
</ul></p>

<p>Also, this week Alexey Pushkin sent pull request and added support for Perpared Geometry and Affine transformations.</p>

<p>The current release of cljts is 0.2.0-SNAPSHOT. You can find API document at <a href="http://sunng87.github.com/cljts/">here</a>. </p>

<p>If you are also interested in bringing clojure to GIS, feel free to get connected and hope I could help you.
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Timing Brings Perf4j to Clojure</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/07/02/timing-brings-perf4j-to-clojure/"/>
    
    <id>/blog/2012/07/02/timing-brings-perf4j-to-clojure</id>
    <published>2012-07-02T00:00:00+08:00</published>
    <updated>2012-07-02T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p><a href="https://github.com/sunng87/timing" target="_blank">Timing</a> is a dead simple clojure library wraps perf4j, while perf4j is an advanced library to log call time. It's like log4j to System.out.println, that to System.currentTimeMillies. </p>

<p>The core part of Timing library is a `timed` macro. You can put any forms in it and it will log the call time.</p>

<p>[cc lang="clojure"]<br />
(timed "demo"<br />
  (look-for-something-from-the-moon)<br />
  ...)<br />
[/cc]</p>

<p>And it logs:<br />
start[1341215254682] time[1000] tag[demo]</p>

<p>Timing looks up your classpath at startup for a logging backend: slf4j or log4j. If neither of them found, it fails back to log to stderr. By the way, log4j is the recommended logging backend. There are some predefined appender in perf4j to generate semi-realtime summary and charts. Anyway, Timing, as a library, doesn't depend on any library other than perf4j.</p>

<p>The project is hosted at <a href="https://github.com/sunng87/timing" target="_blank">github</a> and available on clojars of version "0.1.0".</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker 0.8.0</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/04/22/slacker-0-8-0/"/>
    
    <id>/blog/2012/04/22/slacker-0-8-0</id>
    <published>2012-04-22T00:00:00+08:00</published>
    <updated>2012-04-22T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>A new release 0.8.0 of <a href="https://github.com/sunng87/slacker">slacker</a> has been pushed to clojars. Let's go through the changes in this version.</p>

<p><h3>Clojure 1.3 compatible</h3>
Slacker finally landed on clojure 1.3. It takes advantages of performance in 1.3. Also, you can use 1.3 API in slacker. For example, a timeout argument is supported in deref, which is useful when dealing with promise returned by slacker's asynchronous call.</p>

<p><h3>Performance Boost</h3></p>

<p>The performance enhancement is on the highest priority in this release.  I have migrated the NIO infrastructure to a new library called <a href="https://github.com/sunng87/link">link</a>. Now slacker 0.8.0 is at least <strong>8x</strong> faster than previous release. There is significant improvement both on per-request latency and overall throughput. And the server thread model is optimized for data-intensive tasks. Heavy IO tasks in hosted functions won't block the whole server. </p>

<p><h3>slacker as a ring app</h3></p>

<p>Instead of running default transportation, slacker now can be configured as a ring app and deployed on any ring adapter. </p>

<p>[cc lang="clojure"]<br />
(use 'slacker.server)<br />
(use 'ring.adapter.jetty)</p>

<p>(run-jetty (slacker-ring-app (the-ns 'slacker.example.api)) {:port 8080})<br />
[/cc]</p>

<p>This will expose the name space <em>slacker.example.api</em> with HTTP. Functions could be called with following URL pattern:</p>

<p>http://localhost:8080/&lt;namespace&gt;/&lt;function&gt;.&lt;content-type&gt;</p>

<p>For instance: http://localhost:8080/slacker.example.api/timestamp.json</p>

<p><h3>defn-remote</h3></p>

<p>There is a minor update for the defn-remote macro. </p>

<p>In 0.7.0, you have to specify remote namespace with an option:<br />
[cc lang="clojure"]<br />
(defn-remote sc timestamp :remote-ns "slacker.example.api")<br />
[/cc]</p>

<p>In 0.8.0, it's more convenience: <br />
[cc lang="clojure"]<br />
(defn-remote sc slacker.example.api/timestamp)<br />
[/cc]</p>

<p>To keep the core library compact, in 0.8.0, the cluster support has been moved to a standalone project <a href="https://github.com/sunng87/slacker-cluster">slacker-cluster</a>. </p>

<p>All above summarized my recent work in the slacker project. If you have any question with this library, feel free to drop me an email sunng@about.me .
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">What's New in Slacker 0.7.0 ?</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/03/09/whats-new-in-slacker-0-7-0/"/>
    
    <id>/blog/2012/03/09/whats-new-in-slacker-0-7-0</id>
    <published>2012-03-09T00:00:00+08:00</published>
    <updated>2012-03-09T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>I just released [slacker "0.7.0"] to clojars. This is the first release after my presentation on the Clojure China Meetup. <a href="https://github.com/lbt05" target="_blank">lbt05</a> contributed an ACL module to slacker, which is the most significant feature in this release. </p>

<p>The ACL module provides a simple DSL to define access rules.</p>

<p>[cc lang="clojure"]<br />
(use 'slacker.acl)<br />
(use 'slacker.server)</p>

<p>(defrules myrule<br />
  (allow ["10.60.15.*"]))</p>

<p>(start-slacker-server ...<br />
                      :acl myrule)<br />
[/cc]</p>

<p>"myrule" defines a limited access control list. Only clients from IP segment 10.60.15.* could access the slacker service.</p>

<p>And there are also minor enhancements in this release:</p>

<p><ul>
<li>Content compression, new content type :deflate-carb :deflate-json and :deflate-clj</li>
<li>In debug mode, server side stacktraces are printed on client</li>
<li>Zookeeper node path refined</li>
<li>New options in use-remote, :only and :exclude</li>
<li>Cheshire used as json library</li>
</ul></p>

<p>slacker 0.7.0 will be the last version on clojure 1.2 . As aleph 0.2.1 is coming near, we will migrate to clojure 1.3 as soon as possible. If you like to taste slacker on your 1.3 application now, there is a 0.7.1-SNAPSHOT available.</p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Python's Valentines Day Gift to Clojure</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/02/14/pythons-valentines-day-gift-to-clojure/"/>
    
    <id>/blog/2012/02/14/pythons-valentines-day-gift-to-clojure</id>
    <published>2012-02-14T00:00:00+08:00</published>
    <updated>2012-02-14T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>Inspired by meh's <a href="https://github.com/meh/ruby-clj" target="_blank">Ruby-Clj</a> module, I created the python equivalent "pyclj" last weekend. Pyclj is a clojure literal reader/writer for python. It enables data exchange between python and clojure, in a clojure-native way. It's Valentines Day today, I'd like to release it as the gift of python to clojure :)</p>

<p>The API is very simple. It's all like python's data modules (json, pickle)</p>

<p>[cc lang="python"]<br />
import clj</p>

<p>clj.loads("[1 2 3]")<br />
clj.dumps({"a":1, "b":2})<br />
[/cc]</p>

<p>Clojure types are mapping to python data structures :</p>

<p><table border="1">
<tbody><tr>
<th>Clojure</th>
<th>Python</th>
</tr>
<tr>
<td>list</td>
<td>list</td>
</tr>
<tr>
<td>vector</td>
<td>list</td>
</tr>
<tr>
<td>set</td>
<td>set</td>
</tr>
<tr>
<td>map</td>
<td>dict</td>
</tr>
<tr>
<td>nil</td>
<td>None</td>
</tr>
<tr>
<td>string</td>
<td>string</td>
</tr>
<tr>
<td>int</td>
<td>int</td>
</tr>
<tr>
<td>float</td>
<td>float</td>
</tr>
<tr>
<td>boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>char</td>
<td>string</td>
</tr>
<tr>
<td>keyword</td>
<td>string</td>
</tr>
</tbody></table></p>

<p>But how we win clojure's heart from ruby? </p>

<p>We are faster.</p>

<p>Considering clojure literal below:<br />
[cc lang="clojure"]<br />
[1 2 3 true false nil {:a 21.3 :b 43.2} "Hello"]<br />
[/cc]</p>

<p>Comparing ruby-clj(0.0.4.5, ruby 1.9.3p0) and pyclj(0.1.3 python 2.7.2):<br />
[cc lang="ruby"]<br />
require 'clj'</p>

<p>s = "[1 2 3 true false nil {:a 21.3 :b 43.2} \"Hello\"]"</p>

<p>t1 = Time.now()<br />
for i in 0...10000<br />
  Clojure.parse(s)<br />
end<br />
puts Time.now()-t1<br />
[/cc]</p>

<p>[cc lang="python"]<br />
import clj<br />
import time</p>

<p>s = "[1 2 3 true false nil {:a 21.3 :b 43.2} \"Hello\"]"</p>

<p>t1 = time.time()<br />
for i in range(10000):<br />
  clj.loads(s)<br />
print time.time()-t1<br />
[/cc]</p>

<p>The result:<br />
ruby: <del datetime="2012-02-16T05:30:18+00:00"><strong>13.451157809</strong></del>
python: <del datetime="2012-02-16T05:30:18+00:00"><strong>0.712423086166</strong></del>
Edit 20120216 13:30<br />
ruby-clj 0.0.5.3 has resolved the performance issue :) <br />
The new result ruby-clj/0.0.5.4 Vs pyclj0.1.4 (on my laptop):<br />
ruby-clj: 2.044872364<br />
pyclj: 1.19659209251</p>

<p>The project is hosted on <a href="https://github.com/sunng87/pyclj" target="_blank">github</a>. Feel free to join the development and enhance it.</p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">HeatCanvas Performance Enhanced</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/02/11/heatcanvas-performance-enhanced/"/>
    
    <id>/blog/2012/02/11/heatcanvas-performance-enhanced</id>
    <published>2012-02-11T00:00:00+08:00</published>
    <updated>2012-02-11T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p><img src="http://i.imgur.com/6vkpo.png" alt="heatcanvas" /></p>

<p>æ¶éåå¹´æ¥æ¥æ²æµ¸å¨clojureä¸çéçæ¶åï¼å¤äºäºgithubä¸<a href="https://github.com/dazuma">Daniel Azuma</a>çæç¤ºï¼ç°å¨HeatCanvaséè¿Image Dataæ°ç»æ¥ç»å¶å¾åãè¿å»ç±äºä¸å¤ªçæCanvas APIï¼æç¨çæ¯fillRectæ¥å¡«å1åç´ å¤§å°çåºåï¼æ¨¡æåç´ çæ¸²æãä½æ¯è¿ç§æ¹å¼å¯¼è´æµè§å¨æ¸²æçæçéå¸¸ä½ã</p>

<p>ImageDataArrayåè®¸ç¨æ·å¼è¾ä¸ä¸ªåºå®å¤§å°çbufferï¼å¹¶è®¾ç½®æ¯ä¸åç´ çåç´ å¼ï¼ç¶åä¸æ¬¡æ§å°æ¸²æå°canvasä¸ãè¯¦æå¯ä»¥åèè¿éï¼<a href="https://developer.mozilla.org/En/HTML/Canvas/Pixel_manipulation_with_canvas" target="_blank">Pixel manipulation with canvas</a></p>

<p>è¿æ¬¡æ§è½çæååºæ¬æ²¡æå½±åAPIï¼å¯ä¸çåºå«æ¯å¦æååèªå®ä¹äºvalue-colorçæ å°å½æ°çè¯ï¼ç°å¨ä¸åæ¥åhslçcsså­ç¬¦ä¸²äºï¼æ°çAPIéè¦ä½ è¿åä¸ä¸ªåä¸ªåç´ çæ°ç»ï¼åå«ä»£è¡¨h, s, l, aï¼å¼å[0-1]ã</p>

<p>æè°¢å³æ³¨HeatCanvasçæåã</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker Cluster</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/02/04/slacker-cluster/"/>
    
    <id>/blog/2012/02/04/slacker-cluster</id>
    <published>2012-02-04T00:00:00+08:00</published>
    <updated>2012-02-04T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>Cluster support is one of the big thing in slacker 0.6.x. Cluster enables high-availability and load balancing on slacker client and server. </p>

<p>Slacker cluster has a centralized registry, a zookeeper node, stores information of all the namespaces and servers instances in the cluster. Once a client declared remote functions, by calling `defn-remote` or `use-remote`, it reads all available servers offering that namespace from the registry and create connection to each of them. We the user issues a request, the client randomly pick up a connection from them. So the load is eventually distributed to every instance of slacker servers. And thanks to zookeeper's notification feature, the client watches certain znode. It will be notified when 1. a connected server goes offline 2. a new server serving required namespace added into the cluster. Thus you don't have to change client code or restart client when server changes. </p>

<p>To start a slacker server and add it to a cluster, you have to provide cluster information using the new <strong>:cluster</strong> option:<br />
[cc lang="clojure"]<br />
(start-slacker-server (the-ns 'slacker.example.api)<br />
                      2104<br />
                      :cluster {:zk "127.0.0.1:2181"<br />
                                :name "example-cluster"})<br />
[/cc]</p>

<p><ul>
	<li>:zk is the address of zookeeper node</li>
	<li>:name is a znode qualified string, to identify the cluster</li>
</ul></p>

<p>On the client side, it's important to use APIs from `slacker.client.cluster` instead of `slacker.client`:</p>

<p>[cc lang="clojure"]<br />
(use 'slacker.client.cluster)<br />
;; arguments: cluster-name, zookeeper address<br />
(def sc (clustered-slackerc "example-cluster" "127.0.0.1:2181"))<br />
(use-remote 'sc 'slacker.example.api)</p>

<p>;; call the function from a random server<br />
(timestamp)<br />
[/cc]</p>

<p>If all servers provide 'slacker.example.api go offline, slacker client will raise a "not-found" exception.</p>

<p>Slacker cluster is also designed with simple and clean in mind. You don't have to change you business code to make it remote or cluster. Everything is transparent and non-invasive. Enjoy it.</p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker 0.6: Exposing Multiple Namespaces</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/02/03/slacker-0-6-exposing-multiple-namespaces/"/>
    
    <id>/blog/2012/02/03/slacker-0-6-exposing-multiple-namespaces</id>
    <published>2012-02-03T00:00:00+08:00</published>
    <updated>2012-02-03T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>After <a href="https://github.com/sunng87/slacker/compare/8b4abdb62a...3e41e035b9" title="Changes">98 commits</a> in about one month, I'm glad to announce [slacker "0.6.1"].</p>

<p>One thing in slacker 0.6.x is you can expose multiple namespaces from a single server.</p>

<p>Suppose you have two namespaces `redday.stats` and `redday.api`, both contains functions you want to expose.</p>

<p>[cc lang="clojure"]<br />
  (start-slacker-server [(the-ns 'redday.stats)<br />
                         (the-ns 'redday.api)]<br />
                        6565)<br />
[/cc]</p>

<p>This will expose `redday.stats` and `redday.api` on port 6565.</p>

<p>On the client side, we have a new `use-remote` behaviors like clojure's use. Instead of local one, it imports functions from a remote namespace to your current namespace. </p>

<p>[cc lang="clojure"]<br />
(use 'slacker.client)<br />
;; create a slacker client<br />
(def scp (slackerc "127.0.0.1:6565")) </p>

<p>(use-remote 'scp 'redday.api) ;; caution, use the symbol of 'scp here <br />
(use-remote 'scp 'redday.stats)</p>

<p>;;top-titles is a function in redday.api<br />
;;now you can use the remote function transparently<br />
(top-titles "programming") </p>

<p>;;check function metadata you can find more slacker properties<br />
(meta top-titles)<br />
[/cc]</p>

<p>If you need to configure callback to a particular function, you can still use `defn-remote` to specify the callback function. In slacker 0.6.0, a `:remote-ns` is required when you define such a remote function.<br />
[cc lang="clojure"]<br />
(defn-remote top-titles :remote-ns "redday.api" :callback #(println %))<br />
[/cc]</p>

<p>The complete code example (both server and client) can be found <a href="https://bitbucket.org/sunng/slacker-demo/overview">here</a>. </p>

<p>In next post, I will explain another big new feature of 0.6.x, cluster support.</p>

<p></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">ClojureDocs Android App</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/01/24/clojuredocs-android-app/"/>
    
    <id>/blog/2012/01/24/clojuredocs-android-app</id>
    <published>2012-01-24T00:00:00+08:00</published>
    <updated>2012-01-24T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>å©ç¨æ¥èçåæåäºä¸ä¸ªAndroidåºç¨ï¼å¯ä»¥å¨<a href="http://clojuredocs.org" target="_blank">ClojureDocs.org</a>ä¸æç´¢clojure APIï¼æµè§ææ¡£ãæºä»£ç åç¤¾åºè´¡ç®çä»£ç å®ä¾ãClojureDocså¨æå­¦ä¹ Clojureçè¿ç¨ä¸­èµ·äºå¾å¤§çä½ç¨ï¼æä»¥ææ³è¿ä¸ªç½ç«åºè¯¥å¯¹å¾å¤äººæç¨ã</p>

<p>æ æå»å­¦ä¹ Androidå¹³å°ä¸ç¹ççç¥è¯ï¼ä¸è¿å¥½å¨æPhonegapè¿æ ·çæ¡æ¶ï¼å¯ä»¥æç½é¡µåºç¨è½¬åä¸ºæ¬å°åºç¨ï¼å¹¶ä¸æä¾è®¿é®æ¬å°è®¾å¤çAPIãéè¿Phonegapå¼åçç¨åºè¿å¯ä»¥ç´æ¥ç§»æ¤å°iphoneå¹³å°ä¸ãClojureDocs Androidå°±æ¯è¿è¡å¨Phonegapä¸­ã</p>

<p>é¦é¡µï¼
<img src="http://i.imgur.com/zdMCt.png" alt="" /></p>

<p>æç´¢çé¢
<img src="http://i.imgur.com/MVCz4.png" alt="" /></p>

<p>APIå½æ°çé¢
<img src="http://i.imgur.com/M0fEI.png" alt="" /></p>

<p>ä½ å¯ä»¥ä»githubè·å¾ä»£ç åç­¾åè¿çapkï¼<a href="https://github.com/sunng87/clojuredocs-android" target="_blank">https://github.com/sunng87/clojuredocs-android</a></p>

<p>Known Issueï¼phonegapç¨åºå¨å±å¹æè½¬æ¶ä¼å´©æºï¼å·²ç»å¨2.3å3.2ä¸éç°ï¼ç®åè¿ä¸æ¸æ¥å·ä½çåå ã(Edit 20120127: Fixed in 1.0.4)</p>

<p>æ¬¢è¿ä»»ä½çpull requestã
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Weekend Project: LazyPress</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/01/08/weekend-project-lazypress/"/>
    
    <id>/blog/2012/01/08/weekend-project-lazypress</id>
    <published>2012-01-08T00:00:00+08:00</published>
    <updated>2012-01-08T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>åå¸ä¸ä¸ªå¸åçweekend project, åå­å«å<a href="http://lazypress.cloundfoundry.com">LazyPress</a>.é¡¾åæä¹,è¿æ¯ä¸ä¸ªå¨çº¿çåä½ç³»ç». ååLazy, é¤äºå ä¸ºå®ç¨Clojureåæ,æ´å ä¸ºä»çç®å: æ²¡æç¹ççæ³¨å,æ²¡æç¹ççåç±»tag,æ²¡æç¹ççæ ¼å¼å,æ è®ºæ¯ä½¿ç¨è¿æ¯å¼åé½åæ±åå°æç®å.<br />
LazyPresséç¨Mozillaåååå¸ç<a href="http://browserid.org/">BrowserID</a>. ææ¯ä½ä¸ºè´¦å·ç³»ç», ç¨æ·åªéè¦å¨é¦æ¬¡ç»å½åæä¾ä¸ä¸ªIDå³å¯(åæ¬è¿ä¸æ­¥ä¹å¯ä»¥çç¥, ä½æ¯ä¸ºäºä¿æ¤æ¨çé®ç®±éç§, ç°å¨éè¦ä¸ä¸ªLazyPressä¸ç¨çID). è¿æ ·LazyPressæ¬èº«ä¸å­å¨ç¨æ·çå¯ç ,ä¹ç®åäºç¨æ·è´¦å·ç®¡ççä»£ä»·. BrowserIDçç»å½æµç¨éå¸¸ç®å, éåº¦ä¹æ¯ä¼ ç»çOpenIDåOAuthè¦å¿«, ç¨æ·ä½éªè¦æ¯å¤æ¬¡è·³è½¬å¥½å¾å¤.<br />
LazyPressä½¿ç¨Markdownè¿è¡ææ¬æ ¼å¼å, ç®åçç¼è¾å¨å¯ä»¥æ¯æç»å¤§å¤æ°æ ¼å¼çè¦æ±. å¦å¤,å¨æµè§å¨åå°LazyPressä½¿ç¨HTML5 LocalStorageææ¯èªå¨ä¿å­ç¨æ·çææ¬èç¨¿, å¦æç¨æ·æ²¡ææååå¸, å¯ä»¥å¨ä¸æ¬¡æµè§å¨æå¼æ¶è¿è¡æ¢å¤.</p>

<p>LazyPressåå°å­å¨éç¨mongodb. æ­£æ¯mongodbçschema freeç¹æ§éä½äºé¡¹ç®åè½éæçææ¬, ä¿è¿äºäººä»¬æ´å¿«æ´é¢ç¹å°ä¼åäº§åçæ¨¡å. è¿åºè¯¥æ¯ææ¡£åæ°æ®åºä¹äºä¼ ç»å³ç³»åæ°æ®åºæå¤§çä¼å¿. (ç¹å¦gitä¹äºsvn, å¼åæ¯çææ¬è¦ä½å¾å¤, çä¼¼æ¯ä¸ä¸ªæ®éçåè½æ¹è¿, å®åé¼å±ä¿è¿äºå¼åäººåéè¿å¼åæ¯å®ç°èªå·±çä¿®æ¹)<br />
LazyPressè¿è¡å¨æè¿åå¸çcompojure 1.0.0åring 1.0.0ä¸, æåä¸ºæ åçJava webåºç¨ç´æ¥é¨ç½²å¨cloudfoundryä¸. åç«¯ç»§ç»­ä½¿ç¨çæ¯æåç±çMootoolsåº, å ä¸ºä½¿ç¨äºå¾å¤æ°çæµè§å¨ææ¯, æä»¥ç®ååªè½ä¿è¯å¨ææ°çFirefoxåChromium/Chromeä¸æ­£å¸¸ä½¿ç¨.</p>

<p>Fork me on github: <a href="http://github.com/sunng87/lazypress">http://github.com/sunng87/lazypress</a></p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker 0.4.0 Released</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2012/01/04/slacker-0-4-0-released/"/>
    
    <id>/blog/2012/01/04/slacker-0-4-0-released</id>
    <published>2012-01-04T00:00:00+08:00</published>
    <updated>2012-01-04T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>Slacker 0.4.0 has been released to clojars.org . There are new features and breaking changes in this release.</p>

<p><h3>Breaking Changes</h3></p>

<p><ul>
	<li>New maven coordinator: [slacker "0.4.0"] (groupId renamed to slakcer)</li>
	<li>defremote renamed to <strong>defn-remote</strong></li>
	<li>SlackerException removed. slacker now uses slingshot for exception handling</li>
	<li>Rename :async option of defn-remote to <strong>:async?</strong></li></ul></p>

<p></p>

<p><h3>What's new in 0.4.0</h3>
<ul>
	<li>Add new serialization type <strong>:clj</strong></li>
	<li>New interceptors: execution time stats, args logger, slow watch dog</li>
	<li>New HTTP interface</li>
	<li>Server inspect commands	</li></ul></p>

<p><li> utility functions/macros <strong>defn-remote-all</strong>, <strong>defn-remote-batch</strong> and <strong>meta-remote</strong></li></p>

<p></p>

<p>Get more information on <a href="https://github.com/sunng87/slacker" target="_blank">github</a>.
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker 0.2.0 Is Out</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2011/12/10/slacker-0-2-0-is-out/"/>
    
    <id>/blog/2011/12/10/slacker-0-2-0-is-out</id>
    <published>2011-12-10T00:00:00+08:00</published>
    <updated>2011-12-10T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p><a href="https://github.com/sunng87/slacker">Slacker 0.2.0</a> has been pushed to clojars today. Connection pooling and json serialization are available in this release.</p>

<p><h4>Connection Pool</h4>
Generally, pooling connection is a good idea in high concurrence application. To make slacker for real world, connection pool support is a high-prioritized feature in its development. The new connection pool is backended by commons-pool which you might familiar with. To use connection pool, just create slacker client with a new function `slackerc-pool`</p>

<p>[cc lang="clojure"]<br />
(def scp (slackerc-pool "localhost" 2104))<br />
[/cc]</p>

<p>Then you can use this pool just like a single client.</p>

<p>Some options are available to configure the pool by your wish:
<ul>
	<li><em>:max-active</em>, max connections opened by the pool</li>
	<li><em>:exhausted-action</em> <br />
            <ul>
               <li><em>:fail</em> throw an exception when pool exhausted.</li>
<li><em>:block</em> block current thread and wait until max-wait exceed (throw an exception)</li>
	<li><em>:grow</em> automatically create new connection and add it to pool</li></ul></li></ul></p>

<p>            
<li><em>:max-wait</em> max wait time before throwing an exception</li>
	<li><em>:min-idle</em> minimal number of pool hold idle connections </li></p>

<p>
The options are inherited from GenericObjectPool, you can find detailed information from their <a href="http://commons.apache.org/pool/apidocs/org/apache/commons/pool/impl/GenericObjectPool.html">javadoc</a>.</p>

<p><h4>JSON Serialization</h4>
slacker just added json serialization provided by clj-json. According to my test, clj-json is 1x faster than carbonite in serialization. <br />
[cc lang="clojure"]<br />
(def sc (slackerc "localhost" 2104 :content-type :json))<br />
[/cc]</p>

<p>However, with json serialization, you may lost some clojure types like keyword and set in type conversion. You should be caution when using json as serialization method. </p>

<p>In next release, I am planning to use <a href="https://github.com/AlibabaTech/fastjson/" target="_blank">fastjson</a> as json lib which provides option to write type name into json so it could be a full featured serialization for clojure. And fastjson is claimed even faster than jackson.</p>

<p><h4>Performance</h4>
slacker gains high performance with its non-blocking server, serialization and direct function call. As tested on a dual 6 core server,  it reaches 10000+ TPS for a single client (50 connections, 50 threads). The server just use 35% CPU so I consider it could have even more TPS if there is two or more client machines.</p>

<p>So if you are interested in some benchmarks, you can test it with client like <a href="https://gist.github.com/1449860" target="_blank">this</a>. All the requests are using synchronous call because I believe it's the most common case you use slacker.</p>

<p><h4>Next steps</h4>
Inspired by discussion in <a href="http://groups.google.com/group/cn-clojure" target="_blank">cn-clojure</a> mailing list, I'm going to add HTTP transport for slacker. With HTTP transport, it's easier to debug and evaluate your clojure functions, it also makes slacker available to ClojureScript. </p>

<p>At lst, thanks Zach Tellman for reviewing my client code. 
</p>



]]>
    </content>
  </entry>

  <entry>
    <title type="html">Slacker 0.1.0 Is Out</title>
    
    <link rel="alternate" type="text/html" href="http://sunng87.github.io/blog/blog/blog/2011/12/02/slacker-0-1-0-is-out/"/>
    
    <id>/blog/2011/12/02/slacker-0-1-0-is-out</id>
    <published>2011-12-02T00:00:00+08:00</published>
    <updated>2011-12-02T00:00:00+08:00</updated>
    <author>
      <name>Sun Ning</name>
      <uri>http://sunng87.github.io/blog/blog/</uri>
    </author>
    <content type="html" xml:base="http://sunng87.github.io/blog/blog/" >
<![CDATA[

<p>Glad to roll out the first release of the <strong>slacker</strong> framework. Slacker is a clojure RPC framework on top of a TCP binary protocol. It provides a set of non-invasive APIs for both server and client. The remote invocation is completely transparent to user.</p>

<p>In addition to APIs introduced in <a href="http://sunng.info/blog/2011/11/clojure-rpc-prototyping-and-early-thoughts/">last post</a>, asynchronous approach is supported in client API :<br />
[cc lang="clojure"]<br />
(defremote remote-func :async true)<br />
@(remote-func)<br />
[/cc]<br />
If you add option `:async` to defremote, then the function facade will return a promise. You have to deref it by yourself. Also you can use the `:callback` option in defremote to specify a callback function.<br />
[cc lang="clojure"]<br />
(defremote remote-func :callback #(println %))<br />
(remote-func)<br />
[/cc]</p>

<p>This gives you much more flexibility of using remote function. But be careful it will break consistency between local and remote mode. </p>

<p>To use slacker, add it to your project.clj<br />
[cc lang="clojure"]<br />
:dependencies [[info.sunng/slacker "0.1.0"]]<br />
[/cc]</p>

<p>You can find examples on the <a href="https://github.com/sunng87/slacker" target="_blank">github page</a>. </p>



]]>
    </content>
  </entry>

</feed>
